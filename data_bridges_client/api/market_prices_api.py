# coding: utf-8

"""
    VAM-Data-Bridges

    API Documentation of the **DataBridges** platform: https://databridges.vam.wfp.org/. For API discussions and details: #api-integration-vam-data-bridges on Slack, [Teams channel](https://teams.microsoft.com/l/team/19%3a4ca595f7681f4ffa8a86b7af58832e8d%40thread.skype/conversations?groupId=cbd1e508-c6e8-459d-96b7-6cac3039c42c&tenantId=462ad9ae-d7d9-4206-b874-71b1e079776f) **API Integration** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

    The version of the OpenAPI document: 2.0.0
    Contact: wfp.economicanalysis@wfp.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from datetime import datetime

from pydantic import StrictBool, StrictInt, StrictStr, field_validator

from typing import Optional

from data_bridges_client.models.paged_commodity_price_list_dto import PagedCommodityPriceListDTO
from data_bridges_client.models.paged_commodity_weekly_aggregated_price_list_dto import PagedCommodityWeeklyAggregatedPriceListDTO
from data_bridges_client.models.view_extended_aggregated_price_paged_result import ViewExtendedAggregatedPricePagedResult
from data_bridges_client.models.view_extended_alps_value_paged_result import ViewExtendedAlpsValuePagedResult

from data_bridges_client.api_client import ApiClient
from data_bridges_client.api_response import ApiResponse
from data_bridges_client.rest import RESTResponseType


class MarketPricesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def market_prices_alps_get(
        self,
        country_code: Annotated[Optional[StrictStr], Field(description="The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.")] = None,
        market_id: Annotated[Optional[StrictInt], Field(description="Unique ID of a Market, as found in /Markets/GeoJSONList")] = None,
        commodity_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a Commodity, as found in /Commodities/List")] = None,
        price_type_name: Annotated[Optional[StrictStr], Field(description="Price type: [retail|wholesale|farmgate]")] = None,
        currency_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a currency, as found in /Currency/List")] = None,
        price_flag: Annotated[Optional[StrictStr], Field(description="Type of price data: [actual|aggregate|estimated|forecasted]")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        end_date: Annotated[Optional[datetime], Field(description="Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        latest_value_only: Annotated[Optional[StrictBool], Field(description="[TRUE|FALSE]")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number for paged results")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format: [JSON|CSV] Json is the default value")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ViewExtendedAlpsValuePagedResult:
        """Returns time series values of ALPS and PEWI.

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access%20Policy-Open-green)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  Returns the full time series of the Alert for Price Spikes (ALPS) and the value of the Price Early Warning Index (PEWI). Methodology is available in [DataViz](https://dataviz.vam.wfp.org/) and [VAM-Resource Centre](https://resources.vam.wfp.org/). Country code, either ISO-3166 Alpha 3 code or the VAM internal admin0code is mandatory.    **Data Controller** - Wael Attia  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param country_code: The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.
        :type country_code: str
        :param market_id: Unique ID of a Market, as found in /Markets/GeoJSONList
        :type market_id: int
        :param commodity_id: The exact ID of a Commodity, as found in /Commodities/List
        :type commodity_id: int
        :param price_type_name: Price type: [retail|wholesale|farmgate]
        :type price_type_name: str
        :param currency_id: The exact ID of a currency, as found in /Currency/List
        :type currency_id: int
        :param price_flag: Type of price data: [actual|aggregate|estimated|forecasted]
        :type price_flag: str
        :param start_date: Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type start_date: datetime
        :param end_date: Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type end_date: datetime
        :param latest_value_only: [TRUE|FALSE]
        :type latest_value_only: bool
        :param page: Page number for paged results
        :type page: int
        :param format: Output format: [JSON|CSV] Json is the default value
        :type format: str
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._market_prices_alps_get_serialize(
            country_code=country_code,
            market_id=market_id,
            commodity_id=commodity_id,
            price_type_name=price_type_name,
            currency_id=currency_id,
            price_flag=price_flag,
            start_date=start_date,
            end_date=end_date,
            latest_value_only=latest_value_only,
            page=page,
            format=format,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ViewExtendedAlpsValuePagedResult",
            '400': "BadRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def market_prices_alps_get_with_http_info(
        self,
        country_code: Annotated[Optional[StrictStr], Field(description="The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.")] = None,
        market_id: Annotated[Optional[StrictInt], Field(description="Unique ID of a Market, as found in /Markets/GeoJSONList")] = None,
        commodity_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a Commodity, as found in /Commodities/List")] = None,
        price_type_name: Annotated[Optional[StrictStr], Field(description="Price type: [retail|wholesale|farmgate]")] = None,
        currency_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a currency, as found in /Currency/List")] = None,
        price_flag: Annotated[Optional[StrictStr], Field(description="Type of price data: [actual|aggregate|estimated|forecasted]")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        end_date: Annotated[Optional[datetime], Field(description="Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        latest_value_only: Annotated[Optional[StrictBool], Field(description="[TRUE|FALSE]")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number for paged results")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format: [JSON|CSV] Json is the default value")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ViewExtendedAlpsValuePagedResult]:
        """Returns time series values of ALPS and PEWI.

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access%20Policy-Open-green)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  Returns the full time series of the Alert for Price Spikes (ALPS) and the value of the Price Early Warning Index (PEWI). Methodology is available in [DataViz](https://dataviz.vam.wfp.org/) and [VAM-Resource Centre](https://resources.vam.wfp.org/). Country code, either ISO-3166 Alpha 3 code or the VAM internal admin0code is mandatory.    **Data Controller** - Wael Attia  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param country_code: The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.
        :type country_code: str
        :param market_id: Unique ID of a Market, as found in /Markets/GeoJSONList
        :type market_id: int
        :param commodity_id: The exact ID of a Commodity, as found in /Commodities/List
        :type commodity_id: int
        :param price_type_name: Price type: [retail|wholesale|farmgate]
        :type price_type_name: str
        :param currency_id: The exact ID of a currency, as found in /Currency/List
        :type currency_id: int
        :param price_flag: Type of price data: [actual|aggregate|estimated|forecasted]
        :type price_flag: str
        :param start_date: Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type start_date: datetime
        :param end_date: Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type end_date: datetime
        :param latest_value_only: [TRUE|FALSE]
        :type latest_value_only: bool
        :param page: Page number for paged results
        :type page: int
        :param format: Output format: [JSON|CSV] Json is the default value
        :type format: str
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._market_prices_alps_get_serialize(
            country_code=country_code,
            market_id=market_id,
            commodity_id=commodity_id,
            price_type_name=price_type_name,
            currency_id=currency_id,
            price_flag=price_flag,
            start_date=start_date,
            end_date=end_date,
            latest_value_only=latest_value_only,
            page=page,
            format=format,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ViewExtendedAlpsValuePagedResult",
            '400': "BadRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def market_prices_alps_get_without_preload_content(
        self,
        country_code: Annotated[Optional[StrictStr], Field(description="The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.")] = None,
        market_id: Annotated[Optional[StrictInt], Field(description="Unique ID of a Market, as found in /Markets/GeoJSONList")] = None,
        commodity_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a Commodity, as found in /Commodities/List")] = None,
        price_type_name: Annotated[Optional[StrictStr], Field(description="Price type: [retail|wholesale|farmgate]")] = None,
        currency_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a currency, as found in /Currency/List")] = None,
        price_flag: Annotated[Optional[StrictStr], Field(description="Type of price data: [actual|aggregate|estimated|forecasted]")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        end_date: Annotated[Optional[datetime], Field(description="Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        latest_value_only: Annotated[Optional[StrictBool], Field(description="[TRUE|FALSE]")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number for paged results")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format: [JSON|CSV] Json is the default value")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Returns time series values of ALPS and PEWI.

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access%20Policy-Open-green)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  Returns the full time series of the Alert for Price Spikes (ALPS) and the value of the Price Early Warning Index (PEWI). Methodology is available in [DataViz](https://dataviz.vam.wfp.org/) and [VAM-Resource Centre](https://resources.vam.wfp.org/). Country code, either ISO-3166 Alpha 3 code or the VAM internal admin0code is mandatory.    **Data Controller** - Wael Attia  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param country_code: The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.
        :type country_code: str
        :param market_id: Unique ID of a Market, as found in /Markets/GeoJSONList
        :type market_id: int
        :param commodity_id: The exact ID of a Commodity, as found in /Commodities/List
        :type commodity_id: int
        :param price_type_name: Price type: [retail|wholesale|farmgate]
        :type price_type_name: str
        :param currency_id: The exact ID of a currency, as found in /Currency/List
        :type currency_id: int
        :param price_flag: Type of price data: [actual|aggregate|estimated|forecasted]
        :type price_flag: str
        :param start_date: Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type start_date: datetime
        :param end_date: Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type end_date: datetime
        :param latest_value_only: [TRUE|FALSE]
        :type latest_value_only: bool
        :param page: Page number for paged results
        :type page: int
        :param format: Output format: [JSON|CSV] Json is the default value
        :type format: str
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._market_prices_alps_get_serialize(
            country_code=country_code,
            market_id=market_id,
            commodity_id=commodity_id,
            price_type_name=price_type_name,
            currency_id=currency_id,
            price_flag=price_flag,
            start_date=start_date,
            end_date=end_date,
            latest_value_only=latest_value_only,
            page=page,
            format=format,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ViewExtendedAlpsValuePagedResult",
            '400': "BadRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _market_prices_alps_get_serialize(
        self,
        country_code,
        market_id,
        commodity_id,
        price_type_name,
        currency_id,
        price_flag,
        start_date,
        end_date,
        latest_value_only,
        page,
        format,
        env,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if country_code is not None:
            
            _query_params.append(('countryCode', country_code))
            
        if market_id is not None:
            
            _query_params.append(('marketID', market_id))
            
        if commodity_id is not None:
            
            _query_params.append(('commodityID', commodity_id))
            
        if price_type_name is not None:
            
            _query_params.append(('priceTypeName', price_type_name))
            
        if currency_id is not None:
            
            _query_params.append(('currencyID', currency_id))
            
        if price_flag is not None:
            
            _query_params.append(('priceFlag', price_flag))
            
        if start_date is not None:
            if isinstance(start_date, datetime):
                _query_params.append(
                    (
                        'startDate',
                        start_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            if isinstance(end_date, datetime):
                _query_params.append(
                    (
                        'endDate',
                        end_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endDate', end_date))
            
        if latest_value_only is not None:
            
            _query_params.append(('latestValueOnly', latest_value_only))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        if env is not None:
            
            _query_params.append(('env', env))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/plain', 
                'application/json', 
                'text/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'default'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/MarketPrices/Alps',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def market_prices_price_daily_get(
        self,
        country_code: Annotated[Optional[StrictStr], Field(description="The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.")] = None,
        market_id: Annotated[Optional[StrictInt], Field(description="Unique ID of a Market, as found in /Markets/GeoJSONList")] = None,
        commodity_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a Commodity, as found in /Commodities/List")] = None,
        price_type_name: Annotated[Optional[StrictStr], Field(description="Price type: [retail|wholesale|farmgate]")] = None,
        currency_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a currency, as found in /Currency/List")] = None,
        price_flag: Annotated[Optional[StrictStr], Field(description="Type of price data: [actual|aggregate|estimated|forecasted]")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        end_date: Annotated[Optional[datetime], Field(description="Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        latest_value_only: Annotated[Optional[StrictBool], Field(description="[TRUE|FALSE]")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number for paged results")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format: [JSON|CSV] Json is the default value")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ViewExtendedAggregatedPricePagedResult:
        """Returns a daily time series of commodity market prices.

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access%20Policy-Open-green)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  This is the highest frequency available. Data is flagged according to its pre-processing characteristics.  Actual data is collected originally with daily frequency; aggregated data returns an empty list; imputed data is an estimation of missing values in the time series, obtained through the R Amelia-II package;        forecasted data is a six months prediction obtained through different methods, which are reported in the API.  For country specific meta-data please refer to documentation available in DataLibrary. For specific methodological notes on forecasts and imputations refer to the dedicated page in DataViz.  Country code, either ISO-3166 Alpha 3 code or the VAM internal admin0code is mandatory.    **Data Controller** - Wael Attia  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param country_code: The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.
        :type country_code: str
        :param market_id: Unique ID of a Market, as found in /Markets/GeoJSONList
        :type market_id: int
        :param commodity_id: The exact ID of a Commodity, as found in /Commodities/List
        :type commodity_id: int
        :param price_type_name: Price type: [retail|wholesale|farmgate]
        :type price_type_name: str
        :param currency_id: The exact ID of a currency, as found in /Currency/List
        :type currency_id: int
        :param price_flag: Type of price data: [actual|aggregate|estimated|forecasted]
        :type price_flag: str
        :param start_date: Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type start_date: datetime
        :param end_date: Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type end_date: datetime
        :param latest_value_only: [TRUE|FALSE]
        :type latest_value_only: bool
        :param page: Page number for paged results
        :type page: int
        :param format: Output format: [JSON|CSV] Json is the default value
        :type format: str
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._market_prices_price_daily_get_serialize(
            country_code=country_code,
            market_id=market_id,
            commodity_id=commodity_id,
            price_type_name=price_type_name,
            currency_id=currency_id,
            price_flag=price_flag,
            start_date=start_date,
            end_date=end_date,
            latest_value_only=latest_value_only,
            page=page,
            format=format,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ViewExtendedAggregatedPricePagedResult",
            '400': "BadRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def market_prices_price_daily_get_with_http_info(
        self,
        country_code: Annotated[Optional[StrictStr], Field(description="The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.")] = None,
        market_id: Annotated[Optional[StrictInt], Field(description="Unique ID of a Market, as found in /Markets/GeoJSONList")] = None,
        commodity_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a Commodity, as found in /Commodities/List")] = None,
        price_type_name: Annotated[Optional[StrictStr], Field(description="Price type: [retail|wholesale|farmgate]")] = None,
        currency_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a currency, as found in /Currency/List")] = None,
        price_flag: Annotated[Optional[StrictStr], Field(description="Type of price data: [actual|aggregate|estimated|forecasted]")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        end_date: Annotated[Optional[datetime], Field(description="Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        latest_value_only: Annotated[Optional[StrictBool], Field(description="[TRUE|FALSE]")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number for paged results")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format: [JSON|CSV] Json is the default value")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ViewExtendedAggregatedPricePagedResult]:
        """Returns a daily time series of commodity market prices.

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access%20Policy-Open-green)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  This is the highest frequency available. Data is flagged according to its pre-processing characteristics.  Actual data is collected originally with daily frequency; aggregated data returns an empty list; imputed data is an estimation of missing values in the time series, obtained through the R Amelia-II package;        forecasted data is a six months prediction obtained through different methods, which are reported in the API.  For country specific meta-data please refer to documentation available in DataLibrary. For specific methodological notes on forecasts and imputations refer to the dedicated page in DataViz.  Country code, either ISO-3166 Alpha 3 code or the VAM internal admin0code is mandatory.    **Data Controller** - Wael Attia  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param country_code: The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.
        :type country_code: str
        :param market_id: Unique ID of a Market, as found in /Markets/GeoJSONList
        :type market_id: int
        :param commodity_id: The exact ID of a Commodity, as found in /Commodities/List
        :type commodity_id: int
        :param price_type_name: Price type: [retail|wholesale|farmgate]
        :type price_type_name: str
        :param currency_id: The exact ID of a currency, as found in /Currency/List
        :type currency_id: int
        :param price_flag: Type of price data: [actual|aggregate|estimated|forecasted]
        :type price_flag: str
        :param start_date: Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type start_date: datetime
        :param end_date: Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type end_date: datetime
        :param latest_value_only: [TRUE|FALSE]
        :type latest_value_only: bool
        :param page: Page number for paged results
        :type page: int
        :param format: Output format: [JSON|CSV] Json is the default value
        :type format: str
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._market_prices_price_daily_get_serialize(
            country_code=country_code,
            market_id=market_id,
            commodity_id=commodity_id,
            price_type_name=price_type_name,
            currency_id=currency_id,
            price_flag=price_flag,
            start_date=start_date,
            end_date=end_date,
            latest_value_only=latest_value_only,
            page=page,
            format=format,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ViewExtendedAggregatedPricePagedResult",
            '400': "BadRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def market_prices_price_daily_get_without_preload_content(
        self,
        country_code: Annotated[Optional[StrictStr], Field(description="The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.")] = None,
        market_id: Annotated[Optional[StrictInt], Field(description="Unique ID of a Market, as found in /Markets/GeoJSONList")] = None,
        commodity_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a Commodity, as found in /Commodities/List")] = None,
        price_type_name: Annotated[Optional[StrictStr], Field(description="Price type: [retail|wholesale|farmgate]")] = None,
        currency_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a currency, as found in /Currency/List")] = None,
        price_flag: Annotated[Optional[StrictStr], Field(description="Type of price data: [actual|aggregate|estimated|forecasted]")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        end_date: Annotated[Optional[datetime], Field(description="Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        latest_value_only: Annotated[Optional[StrictBool], Field(description="[TRUE|FALSE]")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number for paged results")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format: [JSON|CSV] Json is the default value")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Returns a daily time series of commodity market prices.

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access%20Policy-Open-green)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  This is the highest frequency available. Data is flagged according to its pre-processing characteristics.  Actual data is collected originally with daily frequency; aggregated data returns an empty list; imputed data is an estimation of missing values in the time series, obtained through the R Amelia-II package;        forecasted data is a six months prediction obtained through different methods, which are reported in the API.  For country specific meta-data please refer to documentation available in DataLibrary. For specific methodological notes on forecasts and imputations refer to the dedicated page in DataViz.  Country code, either ISO-3166 Alpha 3 code or the VAM internal admin0code is mandatory.    **Data Controller** - Wael Attia  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param country_code: The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.
        :type country_code: str
        :param market_id: Unique ID of a Market, as found in /Markets/GeoJSONList
        :type market_id: int
        :param commodity_id: The exact ID of a Commodity, as found in /Commodities/List
        :type commodity_id: int
        :param price_type_name: Price type: [retail|wholesale|farmgate]
        :type price_type_name: str
        :param currency_id: The exact ID of a currency, as found in /Currency/List
        :type currency_id: int
        :param price_flag: Type of price data: [actual|aggregate|estimated|forecasted]
        :type price_flag: str
        :param start_date: Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type start_date: datetime
        :param end_date: Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type end_date: datetime
        :param latest_value_only: [TRUE|FALSE]
        :type latest_value_only: bool
        :param page: Page number for paged results
        :type page: int
        :param format: Output format: [JSON|CSV] Json is the default value
        :type format: str
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._market_prices_price_daily_get_serialize(
            country_code=country_code,
            market_id=market_id,
            commodity_id=commodity_id,
            price_type_name=price_type_name,
            currency_id=currency_id,
            price_flag=price_flag,
            start_date=start_date,
            end_date=end_date,
            latest_value_only=latest_value_only,
            page=page,
            format=format,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ViewExtendedAggregatedPricePagedResult",
            '400': "BadRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _market_prices_price_daily_get_serialize(
        self,
        country_code,
        market_id,
        commodity_id,
        price_type_name,
        currency_id,
        price_flag,
        start_date,
        end_date,
        latest_value_only,
        page,
        format,
        env,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if country_code is not None:
            
            _query_params.append(('countryCode', country_code))
            
        if market_id is not None:
            
            _query_params.append(('marketID', market_id))
            
        if commodity_id is not None:
            
            _query_params.append(('commodityID', commodity_id))
            
        if price_type_name is not None:
            
            _query_params.append(('priceTypeName', price_type_name))
            
        if currency_id is not None:
            
            _query_params.append(('currencyID', currency_id))
            
        if price_flag is not None:
            
            _query_params.append(('priceFlag', price_flag))
            
        if start_date is not None:
            if isinstance(start_date, datetime):
                _query_params.append(
                    (
                        'startDate',
                        start_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            if isinstance(end_date, datetime):
                _query_params.append(
                    (
                        'endDate',
                        end_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endDate', end_date))
            
        if latest_value_only is not None:
            
            _query_params.append(('latestValueOnly', latest_value_only))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        if env is not None:
            
            _query_params.append(('env', env))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/plain', 
                'application/json', 
                'text/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'default'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/MarketPrices/PriceDaily',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def market_prices_price_monthly_get(
        self,
        country_code: Annotated[Optional[StrictStr], Field(description="The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.")] = None,
        market_id: Annotated[Optional[StrictInt], Field(description="Unique ID of a Market, as found in /Markets/GeoJSONList")] = None,
        commodity_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a Commodity, as found in /Commodities/List")] = None,
        price_type_name: Annotated[Optional[StrictStr], Field(description="Price type: [retail|wholesale|farmgate]")] = None,
        currency_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a currency, as found in /Currency/List")] = None,
        price_flag: Annotated[Optional[StrictStr], Field(description="Type of price data: [actual|aggregate|estimated|forecasted]")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        end_date: Annotated[Optional[datetime], Field(description="Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        latest_value_only: Annotated[Optional[StrictBool], Field(description="[TRUE|FALSE]")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number for paged results")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format: [JSON|CSV] Json is the default value")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ViewExtendedAggregatedPricePagedResult:
        """Returns a monthly time series of commodity market prices.

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access%20Policy-Open-green)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  This is the lowest frequency available and the most complete data source. Data is flagged according to its pre-processing characteristics. actual data is collected originally with monthly frequency; aggregated data is collected with higher frequency (daily or weekly) averaged through a weighted mean to monthly; imputed data is an estimation of missing values in the time series, obtained through the R Amelia-II package; forecasted data is a six months prediction obtained through different methods, which are reported in the API. For country specific meta-data please refer to documentation available in [DataLibrary](https://datalib.vam.wfp.org/). For specific methodological notes on forecasts and imputations refer to the dedicated page in [DataViz](https://dataviz.vam.wfp.org/). Country code, either ISO-3166 Alpha 3 code or the VAM internal admin0code is mandatory.    **Data Controller** - Wael Attia  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param country_code: The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.
        :type country_code: str
        :param market_id: Unique ID of a Market, as found in /Markets/GeoJSONList
        :type market_id: int
        :param commodity_id: The exact ID of a Commodity, as found in /Commodities/List
        :type commodity_id: int
        :param price_type_name: Price type: [retail|wholesale|farmgate]
        :type price_type_name: str
        :param currency_id: The exact ID of a currency, as found in /Currency/List
        :type currency_id: int
        :param price_flag: Type of price data: [actual|aggregate|estimated|forecasted]
        :type price_flag: str
        :param start_date: Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type start_date: datetime
        :param end_date: Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type end_date: datetime
        :param latest_value_only: [TRUE|FALSE]
        :type latest_value_only: bool
        :param page: Page number for paged results
        :type page: int
        :param format: Output format: [JSON|CSV] Json is the default value
        :type format: str
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._market_prices_price_monthly_get_serialize(
            country_code=country_code,
            market_id=market_id,
            commodity_id=commodity_id,
            price_type_name=price_type_name,
            currency_id=currency_id,
            price_flag=price_flag,
            start_date=start_date,
            end_date=end_date,
            latest_value_only=latest_value_only,
            page=page,
            format=format,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ViewExtendedAggregatedPricePagedResult",
            '400': "BadRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def market_prices_price_monthly_get_with_http_info(
        self,
        country_code: Annotated[Optional[StrictStr], Field(description="The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.")] = None,
        market_id: Annotated[Optional[StrictInt], Field(description="Unique ID of a Market, as found in /Markets/GeoJSONList")] = None,
        commodity_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a Commodity, as found in /Commodities/List")] = None,
        price_type_name: Annotated[Optional[StrictStr], Field(description="Price type: [retail|wholesale|farmgate]")] = None,
        currency_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a currency, as found in /Currency/List")] = None,
        price_flag: Annotated[Optional[StrictStr], Field(description="Type of price data: [actual|aggregate|estimated|forecasted]")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        end_date: Annotated[Optional[datetime], Field(description="Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        latest_value_only: Annotated[Optional[StrictBool], Field(description="[TRUE|FALSE]")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number for paged results")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format: [JSON|CSV] Json is the default value")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ViewExtendedAggregatedPricePagedResult]:
        """Returns a monthly time series of commodity market prices.

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access%20Policy-Open-green)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  This is the lowest frequency available and the most complete data source. Data is flagged according to its pre-processing characteristics. actual data is collected originally with monthly frequency; aggregated data is collected with higher frequency (daily or weekly) averaged through a weighted mean to monthly; imputed data is an estimation of missing values in the time series, obtained through the R Amelia-II package; forecasted data is a six months prediction obtained through different methods, which are reported in the API. For country specific meta-data please refer to documentation available in [DataLibrary](https://datalib.vam.wfp.org/). For specific methodological notes on forecasts and imputations refer to the dedicated page in [DataViz](https://dataviz.vam.wfp.org/). Country code, either ISO-3166 Alpha 3 code or the VAM internal admin0code is mandatory.    **Data Controller** - Wael Attia  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param country_code: The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.
        :type country_code: str
        :param market_id: Unique ID of a Market, as found in /Markets/GeoJSONList
        :type market_id: int
        :param commodity_id: The exact ID of a Commodity, as found in /Commodities/List
        :type commodity_id: int
        :param price_type_name: Price type: [retail|wholesale|farmgate]
        :type price_type_name: str
        :param currency_id: The exact ID of a currency, as found in /Currency/List
        :type currency_id: int
        :param price_flag: Type of price data: [actual|aggregate|estimated|forecasted]
        :type price_flag: str
        :param start_date: Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type start_date: datetime
        :param end_date: Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type end_date: datetime
        :param latest_value_only: [TRUE|FALSE]
        :type latest_value_only: bool
        :param page: Page number for paged results
        :type page: int
        :param format: Output format: [JSON|CSV] Json is the default value
        :type format: str
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._market_prices_price_monthly_get_serialize(
            country_code=country_code,
            market_id=market_id,
            commodity_id=commodity_id,
            price_type_name=price_type_name,
            currency_id=currency_id,
            price_flag=price_flag,
            start_date=start_date,
            end_date=end_date,
            latest_value_only=latest_value_only,
            page=page,
            format=format,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ViewExtendedAggregatedPricePagedResult",
            '400': "BadRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def market_prices_price_monthly_get_without_preload_content(
        self,
        country_code: Annotated[Optional[StrictStr], Field(description="The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.")] = None,
        market_id: Annotated[Optional[StrictInt], Field(description="Unique ID of a Market, as found in /Markets/GeoJSONList")] = None,
        commodity_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a Commodity, as found in /Commodities/List")] = None,
        price_type_name: Annotated[Optional[StrictStr], Field(description="Price type: [retail|wholesale|farmgate]")] = None,
        currency_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a currency, as found in /Currency/List")] = None,
        price_flag: Annotated[Optional[StrictStr], Field(description="Type of price data: [actual|aggregate|estimated|forecasted]")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        end_date: Annotated[Optional[datetime], Field(description="Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        latest_value_only: Annotated[Optional[StrictBool], Field(description="[TRUE|FALSE]")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number for paged results")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format: [JSON|CSV] Json is the default value")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Returns a monthly time series of commodity market prices.

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access%20Policy-Open-green)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  This is the lowest frequency available and the most complete data source. Data is flagged according to its pre-processing characteristics. actual data is collected originally with monthly frequency; aggregated data is collected with higher frequency (daily or weekly) averaged through a weighted mean to monthly; imputed data is an estimation of missing values in the time series, obtained through the R Amelia-II package; forecasted data is a six months prediction obtained through different methods, which are reported in the API. For country specific meta-data please refer to documentation available in [DataLibrary](https://datalib.vam.wfp.org/). For specific methodological notes on forecasts and imputations refer to the dedicated page in [DataViz](https://dataviz.vam.wfp.org/). Country code, either ISO-3166 Alpha 3 code or the VAM internal admin0code is mandatory.    **Data Controller** - Wael Attia  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param country_code: The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.
        :type country_code: str
        :param market_id: Unique ID of a Market, as found in /Markets/GeoJSONList
        :type market_id: int
        :param commodity_id: The exact ID of a Commodity, as found in /Commodities/List
        :type commodity_id: int
        :param price_type_name: Price type: [retail|wholesale|farmgate]
        :type price_type_name: str
        :param currency_id: The exact ID of a currency, as found in /Currency/List
        :type currency_id: int
        :param price_flag: Type of price data: [actual|aggregate|estimated|forecasted]
        :type price_flag: str
        :param start_date: Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type start_date: datetime
        :param end_date: Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type end_date: datetime
        :param latest_value_only: [TRUE|FALSE]
        :type latest_value_only: bool
        :param page: Page number for paged results
        :type page: int
        :param format: Output format: [JSON|CSV] Json is the default value
        :type format: str
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._market_prices_price_monthly_get_serialize(
            country_code=country_code,
            market_id=market_id,
            commodity_id=commodity_id,
            price_type_name=price_type_name,
            currency_id=currency_id,
            price_flag=price_flag,
            start_date=start_date,
            end_date=end_date,
            latest_value_only=latest_value_only,
            page=page,
            format=format,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ViewExtendedAggregatedPricePagedResult",
            '400': "BadRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _market_prices_price_monthly_get_serialize(
        self,
        country_code,
        market_id,
        commodity_id,
        price_type_name,
        currency_id,
        price_flag,
        start_date,
        end_date,
        latest_value_only,
        page,
        format,
        env,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if country_code is not None:
            
            _query_params.append(('countryCode', country_code))
            
        if market_id is not None:
            
            _query_params.append(('marketID', market_id))
            
        if commodity_id is not None:
            
            _query_params.append(('commodityID', commodity_id))
            
        if price_type_name is not None:
            
            _query_params.append(('priceTypeName', price_type_name))
            
        if currency_id is not None:
            
            _query_params.append(('currencyID', currency_id))
            
        if price_flag is not None:
            
            _query_params.append(('priceFlag', price_flag))
            
        if start_date is not None:
            if isinstance(start_date, datetime):
                _query_params.append(
                    (
                        'startDate',
                        start_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            if isinstance(end_date, datetime):
                _query_params.append(
                    (
                        'endDate',
                        end_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endDate', end_date))
            
        if latest_value_only is not None:
            
            _query_params.append(('latestValueOnly', latest_value_only))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        if env is not None:
            
            _query_params.append(('env', env))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/plain', 
                'application/json', 
                'text/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'default'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/MarketPrices/PriceMonthly',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def market_prices_price_raw_get(
        self,
        country_code: Annotated[Optional[StrictStr], Field(description="The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.")] = None,
        market_id: Annotated[Optional[StrictInt], Field(description="Unique ID of a Market, as found in /Markets/GeoJSONList")] = None,
        commodity_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a Commodity, as found in /Commodities/List")] = None,
        price_type_name: Annotated[Optional[StrictStr], Field(description="Price type: [retail|wholesale|farmgate]")] = None,
        currency_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a currency, as found in /Currency/List")] = None,
        price_flag: Annotated[Optional[StrictStr], Field(description="Type of price data: [actual|aggregate|estimated|forecasted]")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        end_date: Annotated[Optional[datetime], Field(description="Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        latest_value_only: Annotated[Optional[StrictBool], Field(description="[TRUE|FALSE]")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number for paged results")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format: [JSON|CSV] Json is the default value")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PagedCommodityPriceListDTO:
        """Returns original commodity market prices

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access%20Policy-Restricted-yellow)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Official%20Use%20Only-yellow)]()  ### This endpoint is restricted, it requires the scope: \"vamdatabridges_marketprices-priceraw_get\"  Restricted endpoint. Returns the original data with the entire Commodity Price Metadata as inserted by the focal point, which might contain sensitive or personal informatio. Country code, either ISO-3166 Alpha 3 code or the VAM internal admin0code is mandatory.    **Data Controller** - Wael Attia  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param country_code: The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.
        :type country_code: str
        :param market_id: Unique ID of a Market, as found in /Markets/GeoJSONList
        :type market_id: int
        :param commodity_id: The exact ID of a Commodity, as found in /Commodities/List
        :type commodity_id: int
        :param price_type_name: Price type: [retail|wholesale|farmgate]
        :type price_type_name: str
        :param currency_id: The exact ID of a currency, as found in /Currency/List
        :type currency_id: int
        :param price_flag: Type of price data: [actual|aggregate|estimated|forecasted]
        :type price_flag: str
        :param start_date: Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type start_date: datetime
        :param end_date: Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type end_date: datetime
        :param latest_value_only: [TRUE|FALSE]
        :type latest_value_only: bool
        :param page: Page number for paged results
        :type page: int
        :param format: Output format: [JSON|CSV] Json is the default value
        :type format: str
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._market_prices_price_raw_get_serialize(
            country_code=country_code,
            market_id=market_id,
            commodity_id=commodity_id,
            price_type_name=price_type_name,
            currency_id=currency_id,
            price_flag=price_flag,
            start_date=start_date,
            end_date=end_date,
            latest_value_only=latest_value_only,
            page=page,
            format=format,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedCommodityPriceListDTO",
            '400': "BadRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def market_prices_price_raw_get_with_http_info(
        self,
        country_code: Annotated[Optional[StrictStr], Field(description="The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.")] = None,
        market_id: Annotated[Optional[StrictInt], Field(description="Unique ID of a Market, as found in /Markets/GeoJSONList")] = None,
        commodity_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a Commodity, as found in /Commodities/List")] = None,
        price_type_name: Annotated[Optional[StrictStr], Field(description="Price type: [retail|wholesale|farmgate]")] = None,
        currency_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a currency, as found in /Currency/List")] = None,
        price_flag: Annotated[Optional[StrictStr], Field(description="Type of price data: [actual|aggregate|estimated|forecasted]")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        end_date: Annotated[Optional[datetime], Field(description="Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        latest_value_only: Annotated[Optional[StrictBool], Field(description="[TRUE|FALSE]")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number for paged results")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format: [JSON|CSV] Json is the default value")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PagedCommodityPriceListDTO]:
        """Returns original commodity market prices

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access%20Policy-Restricted-yellow)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Official%20Use%20Only-yellow)]()  ### This endpoint is restricted, it requires the scope: \"vamdatabridges_marketprices-priceraw_get\"  Restricted endpoint. Returns the original data with the entire Commodity Price Metadata as inserted by the focal point, which might contain sensitive or personal informatio. Country code, either ISO-3166 Alpha 3 code or the VAM internal admin0code is mandatory.    **Data Controller** - Wael Attia  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param country_code: The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.
        :type country_code: str
        :param market_id: Unique ID of a Market, as found in /Markets/GeoJSONList
        :type market_id: int
        :param commodity_id: The exact ID of a Commodity, as found in /Commodities/List
        :type commodity_id: int
        :param price_type_name: Price type: [retail|wholesale|farmgate]
        :type price_type_name: str
        :param currency_id: The exact ID of a currency, as found in /Currency/List
        :type currency_id: int
        :param price_flag: Type of price data: [actual|aggregate|estimated|forecasted]
        :type price_flag: str
        :param start_date: Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type start_date: datetime
        :param end_date: Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type end_date: datetime
        :param latest_value_only: [TRUE|FALSE]
        :type latest_value_only: bool
        :param page: Page number for paged results
        :type page: int
        :param format: Output format: [JSON|CSV] Json is the default value
        :type format: str
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._market_prices_price_raw_get_serialize(
            country_code=country_code,
            market_id=market_id,
            commodity_id=commodity_id,
            price_type_name=price_type_name,
            currency_id=currency_id,
            price_flag=price_flag,
            start_date=start_date,
            end_date=end_date,
            latest_value_only=latest_value_only,
            page=page,
            format=format,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedCommodityPriceListDTO",
            '400': "BadRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def market_prices_price_raw_get_without_preload_content(
        self,
        country_code: Annotated[Optional[StrictStr], Field(description="The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.")] = None,
        market_id: Annotated[Optional[StrictInt], Field(description="Unique ID of a Market, as found in /Markets/GeoJSONList")] = None,
        commodity_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a Commodity, as found in /Commodities/List")] = None,
        price_type_name: Annotated[Optional[StrictStr], Field(description="Price type: [retail|wholesale|farmgate]")] = None,
        currency_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a currency, as found in /Currency/List")] = None,
        price_flag: Annotated[Optional[StrictStr], Field(description="Type of price data: [actual|aggregate|estimated|forecasted]")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        end_date: Annotated[Optional[datetime], Field(description="Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        latest_value_only: Annotated[Optional[StrictBool], Field(description="[TRUE|FALSE]")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number for paged results")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format: [JSON|CSV] Json is the default value")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Returns original commodity market prices

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access%20Policy-Restricted-yellow)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Official%20Use%20Only-yellow)]()  ### This endpoint is restricted, it requires the scope: \"vamdatabridges_marketprices-priceraw_get\"  Restricted endpoint. Returns the original data with the entire Commodity Price Metadata as inserted by the focal point, which might contain sensitive or personal informatio. Country code, either ISO-3166 Alpha 3 code or the VAM internal admin0code is mandatory.    **Data Controller** - Wael Attia  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param country_code: The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.
        :type country_code: str
        :param market_id: Unique ID of a Market, as found in /Markets/GeoJSONList
        :type market_id: int
        :param commodity_id: The exact ID of a Commodity, as found in /Commodities/List
        :type commodity_id: int
        :param price_type_name: Price type: [retail|wholesale|farmgate]
        :type price_type_name: str
        :param currency_id: The exact ID of a currency, as found in /Currency/List
        :type currency_id: int
        :param price_flag: Type of price data: [actual|aggregate|estimated|forecasted]
        :type price_flag: str
        :param start_date: Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type start_date: datetime
        :param end_date: Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type end_date: datetime
        :param latest_value_only: [TRUE|FALSE]
        :type latest_value_only: bool
        :param page: Page number for paged results
        :type page: int
        :param format: Output format: [JSON|CSV] Json is the default value
        :type format: str
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._market_prices_price_raw_get_serialize(
            country_code=country_code,
            market_id=market_id,
            commodity_id=commodity_id,
            price_type_name=price_type_name,
            currency_id=currency_id,
            price_flag=price_flag,
            start_date=start_date,
            end_date=end_date,
            latest_value_only=latest_value_only,
            page=page,
            format=format,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedCommodityPriceListDTO",
            '400': "BadRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _market_prices_price_raw_get_serialize(
        self,
        country_code,
        market_id,
        commodity_id,
        price_type_name,
        currency_id,
        price_flag,
        start_date,
        end_date,
        latest_value_only,
        page,
        format,
        env,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if country_code is not None:
            
            _query_params.append(('countryCode', country_code))
            
        if market_id is not None:
            
            _query_params.append(('marketID', market_id))
            
        if commodity_id is not None:
            
            _query_params.append(('commodityID', commodity_id))
            
        if price_type_name is not None:
            
            _query_params.append(('priceTypeName', price_type_name))
            
        if currency_id is not None:
            
            _query_params.append(('currencyID', currency_id))
            
        if price_flag is not None:
            
            _query_params.append(('priceFlag', price_flag))
            
        if start_date is not None:
            if isinstance(start_date, datetime):
                _query_params.append(
                    (
                        'startDate',
                        start_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            if isinstance(end_date, datetime):
                _query_params.append(
                    (
                        'endDate',
                        end_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endDate', end_date))
            
        if latest_value_only is not None:
            
            _query_params.append(('latestValueOnly', latest_value_only))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        if env is not None:
            
            _query_params.append(('env', env))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/plain', 
                'application/json', 
                'text/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'default'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/MarketPrices/PriceRaw',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def market_prices_price_weekly_get(
        self,
        country_code: Annotated[Optional[StrictStr], Field(description="The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.")] = None,
        market_id: Annotated[Optional[StrictInt], Field(description="Unique ID of a Market, as found in /Markets/GeoJSONList")] = None,
        commodity_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a Commodity, as found in /Commodities/List")] = None,
        price_type_name: Annotated[Optional[StrictStr], Field(description="Price type: [retail|wholesale|farmgate]")] = None,
        currency_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a currency, as found in /Currency/List")] = None,
        price_flag: Annotated[Optional[StrictStr], Field(description="Type of price data: [actual|aggregate|estimated|forecasted]")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        end_date: Annotated[Optional[datetime], Field(description="Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        latest_value_only: Annotated[Optional[StrictBool], Field(description="[TRUE|FALSE]")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number for paged results")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format: [JSON|CSV] Json is the default value")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PagedCommodityWeeklyAggregatedPriceListDTO:
        """Returns a weekly time series of commodity market prices.

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access%20Policy-Open-green)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  Weeks used as reference are the International Organization for Standardization (ISO) week-numbering year (ISO-8601). Data is flagged according to its pre-processing characteristics. Aactual data is collected originally with weekly frequency; aggregated data is collected with higher frequency (daily) averaged through a weighted mean to weekly; imputed data is an estimation of missing values in the time series, obtained through the R Amelia-II package; forecasted data is a six months prediction obtained through different methods, which are reported in the API. For country specific meta-data please refer to documentation available in [DataLibrary](https://datalib.vam.wfp.org/). For specific methodological notes on forecasts and imputations refer to the dedicated page in [DataViz](https://dataviz.vam.wfp.org/). Country code, either ISO-3166 Alpha 3 code or the VAM internal admin0code is mandatory.    **Data Controller** - Wael Attia  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param country_code: The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.
        :type country_code: str
        :param market_id: Unique ID of a Market, as found in /Markets/GeoJSONList
        :type market_id: int
        :param commodity_id: The exact ID of a Commodity, as found in /Commodities/List
        :type commodity_id: int
        :param price_type_name: Price type: [retail|wholesale|farmgate]
        :type price_type_name: str
        :param currency_id: The exact ID of a currency, as found in /Currency/List
        :type currency_id: int
        :param price_flag: Type of price data: [actual|aggregate|estimated|forecasted]
        :type price_flag: str
        :param start_date: Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type start_date: datetime
        :param end_date: Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type end_date: datetime
        :param latest_value_only: [TRUE|FALSE]
        :type latest_value_only: bool
        :param page: Page number for paged results
        :type page: int
        :param format: Output format: [JSON|CSV] Json is the default value
        :type format: str
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._market_prices_price_weekly_get_serialize(
            country_code=country_code,
            market_id=market_id,
            commodity_id=commodity_id,
            price_type_name=price_type_name,
            currency_id=currency_id,
            price_flag=price_flag,
            start_date=start_date,
            end_date=end_date,
            latest_value_only=latest_value_only,
            page=page,
            format=format,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedCommodityWeeklyAggregatedPriceListDTO",
            '400': "BadRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def market_prices_price_weekly_get_with_http_info(
        self,
        country_code: Annotated[Optional[StrictStr], Field(description="The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.")] = None,
        market_id: Annotated[Optional[StrictInt], Field(description="Unique ID of a Market, as found in /Markets/GeoJSONList")] = None,
        commodity_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a Commodity, as found in /Commodities/List")] = None,
        price_type_name: Annotated[Optional[StrictStr], Field(description="Price type: [retail|wholesale|farmgate]")] = None,
        currency_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a currency, as found in /Currency/List")] = None,
        price_flag: Annotated[Optional[StrictStr], Field(description="Type of price data: [actual|aggregate|estimated|forecasted]")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        end_date: Annotated[Optional[datetime], Field(description="Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        latest_value_only: Annotated[Optional[StrictBool], Field(description="[TRUE|FALSE]")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number for paged results")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format: [JSON|CSV] Json is the default value")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PagedCommodityWeeklyAggregatedPriceListDTO]:
        """Returns a weekly time series of commodity market prices.

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access%20Policy-Open-green)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  Weeks used as reference are the International Organization for Standardization (ISO) week-numbering year (ISO-8601). Data is flagged according to its pre-processing characteristics. Aactual data is collected originally with weekly frequency; aggregated data is collected with higher frequency (daily) averaged through a weighted mean to weekly; imputed data is an estimation of missing values in the time series, obtained through the R Amelia-II package; forecasted data is a six months prediction obtained through different methods, which are reported in the API. For country specific meta-data please refer to documentation available in [DataLibrary](https://datalib.vam.wfp.org/). For specific methodological notes on forecasts and imputations refer to the dedicated page in [DataViz](https://dataviz.vam.wfp.org/). Country code, either ISO-3166 Alpha 3 code or the VAM internal admin0code is mandatory.    **Data Controller** - Wael Attia  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param country_code: The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.
        :type country_code: str
        :param market_id: Unique ID of a Market, as found in /Markets/GeoJSONList
        :type market_id: int
        :param commodity_id: The exact ID of a Commodity, as found in /Commodities/List
        :type commodity_id: int
        :param price_type_name: Price type: [retail|wholesale|farmgate]
        :type price_type_name: str
        :param currency_id: The exact ID of a currency, as found in /Currency/List
        :type currency_id: int
        :param price_flag: Type of price data: [actual|aggregate|estimated|forecasted]
        :type price_flag: str
        :param start_date: Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type start_date: datetime
        :param end_date: Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type end_date: datetime
        :param latest_value_only: [TRUE|FALSE]
        :type latest_value_only: bool
        :param page: Page number for paged results
        :type page: int
        :param format: Output format: [JSON|CSV] Json is the default value
        :type format: str
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._market_prices_price_weekly_get_serialize(
            country_code=country_code,
            market_id=market_id,
            commodity_id=commodity_id,
            price_type_name=price_type_name,
            currency_id=currency_id,
            price_flag=price_flag,
            start_date=start_date,
            end_date=end_date,
            latest_value_only=latest_value_only,
            page=page,
            format=format,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedCommodityWeeklyAggregatedPriceListDTO",
            '400': "BadRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def market_prices_price_weekly_get_without_preload_content(
        self,
        country_code: Annotated[Optional[StrictStr], Field(description="The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.")] = None,
        market_id: Annotated[Optional[StrictInt], Field(description="Unique ID of a Market, as found in /Markets/GeoJSONList")] = None,
        commodity_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a Commodity, as found in /Commodities/List")] = None,
        price_type_name: Annotated[Optional[StrictStr], Field(description="Price type: [retail|wholesale|farmgate]")] = None,
        currency_id: Annotated[Optional[StrictInt], Field(description="The exact ID of a currency, as found in /Currency/List")] = None,
        price_flag: Annotated[Optional[StrictStr], Field(description="Type of price data: [actual|aggregate|estimated|forecasted]")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        end_date: Annotated[Optional[datetime], Field(description="Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)")] = None,
        latest_value_only: Annotated[Optional[StrictBool], Field(description="[TRUE|FALSE]")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number for paged results")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format: [JSON|CSV] Json is the default value")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Returns a weekly time series of commodity market prices.

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access%20Policy-Open-green)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  Weeks used as reference are the International Organization for Standardization (ISO) week-numbering year (ISO-8601). Data is flagged according to its pre-processing characteristics. Aactual data is collected originally with weekly frequency; aggregated data is collected with higher frequency (daily) averaged through a weighted mean to weekly; imputed data is an estimation of missing values in the time series, obtained through the R Amelia-II package; forecasted data is a six months prediction obtained through different methods, which are reported in the API. For country specific meta-data please refer to documentation available in [DataLibrary](https://datalib.vam.wfp.org/). For specific methodological notes on forecasts and imputations refer to the dedicated page in [DataViz](https://dataviz.vam.wfp.org/). Country code, either ISO-3166 Alpha 3 code or the VAM internal admin0code is mandatory.    **Data Controller** - Wael Attia  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param country_code: The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.
        :type country_code: str
        :param market_id: Unique ID of a Market, as found in /Markets/GeoJSONList
        :type market_id: int
        :param commodity_id: The exact ID of a Commodity, as found in /Commodities/List
        :type commodity_id: int
        :param price_type_name: Price type: [retail|wholesale|farmgate]
        :type price_type_name: str
        :param currency_id: The exact ID of a currency, as found in /Currency/List
        :type currency_id: int
        :param price_flag: Type of price data: [actual|aggregate|estimated|forecasted]
        :type price_flag: str
        :param start_date: Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type start_date: datetime
        :param end_date: Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24)
        :type end_date: datetime
        :param latest_value_only: [TRUE|FALSE]
        :type latest_value_only: bool
        :param page: Page number for paged results
        :type page: int
        :param format: Output format: [JSON|CSV] Json is the default value
        :type format: str
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._market_prices_price_weekly_get_serialize(
            country_code=country_code,
            market_id=market_id,
            commodity_id=commodity_id,
            price_type_name=price_type_name,
            currency_id=currency_id,
            price_flag=price_flag,
            start_date=start_date,
            end_date=end_date,
            latest_value_only=latest_value_only,
            page=page,
            format=format,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedCommodityWeeklyAggregatedPriceListDTO",
            '400': "BadRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _market_prices_price_weekly_get_serialize(
        self,
        country_code,
        market_id,
        commodity_id,
        price_type_name,
        currency_id,
        price_flag,
        start_date,
        end_date,
        latest_value_only,
        page,
        format,
        env,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if country_code is not None:
            
            _query_params.append(('countryCode', country_code))
            
        if market_id is not None:
            
            _query_params.append(('marketID', market_id))
            
        if commodity_id is not None:
            
            _query_params.append(('commodityID', commodity_id))
            
        if price_type_name is not None:
            
            _query_params.append(('priceTypeName', price_type_name))
            
        if currency_id is not None:
            
            _query_params.append(('currencyID', currency_id))
            
        if price_flag is not None:
            
            _query_params.append(('priceFlag', price_flag))
            
        if start_date is not None:
            if isinstance(start_date, datetime):
                _query_params.append(
                    (
                        'startDate',
                        start_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            if isinstance(end_date, datetime):
                _query_params.append(
                    (
                        'endDate',
                        end_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endDate', end_date))
            
        if latest_value_only is not None:
            
            _query_params.append(('latestValueOnly', latest_value_only))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        if env is not None:
            
            _query_params.append(('env', env))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/plain', 
                'application/json', 
                'text/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'default'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/MarketPrices/PriceWeekly',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


