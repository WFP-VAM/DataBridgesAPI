"""
    VAM-Data-Bridges

    API Documentation of the **DataBridges** platform: https://databridges.vam.wfp.org/. For API discussions and details: #api-integration-vam-data-bridges on Slack, [Teams channel](https://teams.microsoft.com/l/team/19%3a4ca595f7681f4ffa8a86b7af58832e8d%40thread.skype/conversations?groupId=cbd1e508-c6e8-459d-96b7-6cac3039c42c&tenantId=462ad9ae-d7d9-4206-b874-71b1e079776f) **API Integration** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern  # noqa: E501

    The version of the OpenAPI document: 1.4.0
    Contact: wfp.economicanalysis@wfp.org
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from data_bridges_client.api_client import ApiClient, Endpoint as _Endpoint
from data_bridges_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from data_bridges_client.model.bad_request_dto import BadRequestDTO
from data_bridges_client.model.paged_commodity_price_list_dto import PagedCommodityPriceListDTO
from data_bridges_client.model.paged_commodity_weekly_aggregated_price_list_dto import PagedCommodityWeeklyAggregatedPriceListDTO
from data_bridges_client.model.view_extended_aggregated_price_paged_result import ViewExtendedAggregatedPricePagedResult
from data_bridges_client.model.view_extended_alps_value_paged_result import ViewExtendedAlpsValuePagedResult


class MarketPricesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.market_prices_alps_get_endpoint = _Endpoint(
            settings={
                'response_type': (ViewExtendedAlpsValuePagedResult,),
                'auth': [
                    'default'
                ],
                'endpoint_path': '/MarketPrices/Alps',
                'operation_id': 'market_prices_alps_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'country_code',
                    'market_id',
                    'commodity_id',
                    'price_type_name',
                    'currency_id',
                    'price_flag',
                    'start_date',
                    'end_date',
                    'latest_value_only',
                    'page',
                    'format',
                    'env',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'env',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('env',): {

                        "PROD": "prod",
                        "DEV": "dev"
                    },
                },
                'openapi_types': {
                    'country_code':
                        (str,),
                    'market_id':
                        (int,),
                    'commodity_id':
                        (int,),
                    'price_type_name':
                        (str,),
                    'currency_id':
                        (int,),
                    'price_flag':
                        (str,),
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'latest_value_only':
                        (bool,),
                    'page':
                        (int,),
                    'format':
                        (str,),
                    'env':
                        (str,),
                },
                'attribute_map': {
                    'country_code': 'countryCode',
                    'market_id': 'marketID',
                    'commodity_id': 'commodityID',
                    'price_type_name': 'priceTypeName',
                    'currency_id': 'currencyID',
                    'price_flag': 'priceFlag',
                    'start_date': 'startDate',
                    'end_date': 'endDate',
                    'latest_value_only': 'latestValueOnly',
                    'page': 'page',
                    'format': 'format',
                    'env': 'env',
                },
                'location_map': {
                    'country_code': 'query',
                    'market_id': 'query',
                    'commodity_id': 'query',
                    'price_type_name': 'query',
                    'currency_id': 'query',
                    'price_flag': 'query',
                    'start_date': 'query',
                    'end_date': 'query',
                    'latest_value_only': 'query',
                    'page': 'query',
                    'format': 'query',
                    'env': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json',
                    'text/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.market_prices_price_daily_get_endpoint = _Endpoint(
            settings={
                'response_type': (ViewExtendedAggregatedPricePagedResult,),
                'auth': [
                    'default'
                ],
                'endpoint_path': '/MarketPrices/PriceDaily',
                'operation_id': 'market_prices_price_daily_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'country_code',
                    'market_id',
                    'commodity_id',
                    'price_type_name',
                    'currency_id',
                    'price_flag',
                    'start_date',
                    'end_date',
                    'latest_value_only',
                    'page',
                    'format',
                    'env',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'env',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('env',): {

                        "PROD": "prod",
                        "DEV": "dev"
                    },
                },
                'openapi_types': {
                    'country_code':
                        (str,),
                    'market_id':
                        (int,),
                    'commodity_id':
                        (int,),
                    'price_type_name':
                        (str,),
                    'currency_id':
                        (int,),
                    'price_flag':
                        (str,),
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'latest_value_only':
                        (bool,),
                    'page':
                        (int,),
                    'format':
                        (str,),
                    'env':
                        (str,),
                },
                'attribute_map': {
                    'country_code': 'countryCode',
                    'market_id': 'marketID',
                    'commodity_id': 'commodityID',
                    'price_type_name': 'priceTypeName',
                    'currency_id': 'currencyID',
                    'price_flag': 'priceFlag',
                    'start_date': 'startDate',
                    'end_date': 'endDate',
                    'latest_value_only': 'latestValueOnly',
                    'page': 'page',
                    'format': 'format',
                    'env': 'env',
                },
                'location_map': {
                    'country_code': 'query',
                    'market_id': 'query',
                    'commodity_id': 'query',
                    'price_type_name': 'query',
                    'currency_id': 'query',
                    'price_flag': 'query',
                    'start_date': 'query',
                    'end_date': 'query',
                    'latest_value_only': 'query',
                    'page': 'query',
                    'format': 'query',
                    'env': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json',
                    'text/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.market_prices_price_monthly_get_endpoint = _Endpoint(
            settings={
                'response_type': (ViewExtendedAggregatedPricePagedResult,),
                'auth': [
                    'default'
                ],
                'endpoint_path': '/MarketPrices/PriceMonthly',
                'operation_id': 'market_prices_price_monthly_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'country_code',
                    'market_id',
                    'commodity_id',
                    'price_type_name',
                    'currency_id',
                    'price_flag',
                    'start_date',
                    'end_date',
                    'latest_value_only',
                    'page',
                    'format',
                    'env',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'env',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('env',): {

                        "PROD": "prod",
                        "DEV": "dev"
                    },
                },
                'openapi_types': {
                    'country_code':
                        (str,),
                    'market_id':
                        (int,),
                    'commodity_id':
                        (int,),
                    'price_type_name':
                        (str,),
                    'currency_id':
                        (int,),
                    'price_flag':
                        (str,),
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'latest_value_only':
                        (bool,),
                    'page':
                        (int,),
                    'format':
                        (str,),
                    'env':
                        (str,),
                },
                'attribute_map': {
                    'country_code': 'countryCode',
                    'market_id': 'marketID',
                    'commodity_id': 'commodityID',
                    'price_type_name': 'priceTypeName',
                    'currency_id': 'currencyID',
                    'price_flag': 'priceFlag',
                    'start_date': 'startDate',
                    'end_date': 'endDate',
                    'latest_value_only': 'latestValueOnly',
                    'page': 'page',
                    'format': 'format',
                    'env': 'env',
                },
                'location_map': {
                    'country_code': 'query',
                    'market_id': 'query',
                    'commodity_id': 'query',
                    'price_type_name': 'query',
                    'currency_id': 'query',
                    'price_flag': 'query',
                    'start_date': 'query',
                    'end_date': 'query',
                    'latest_value_only': 'query',
                    'page': 'query',
                    'format': 'query',
                    'env': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json',
                    'text/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.market_prices_price_raw_get_endpoint = _Endpoint(
            settings={
                'response_type': (PagedCommodityPriceListDTO,),
                'auth': [
                    'default'
                ],
                'endpoint_path': '/MarketPrices/PriceRaw',
                'operation_id': 'market_prices_price_raw_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'country_code',
                    'market_id',
                    'commodity_id',
                    'price_type_name',
                    'currency_id',
                    'price_flag',
                    'start_date',
                    'end_date',
                    'latest_value_only',
                    'page',
                    'format',
                    'env',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'env',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('env',): {

                        "PROD": "prod",
                        "DEV": "dev"
                    },
                },
                'openapi_types': {
                    'country_code':
                        (str,),
                    'market_id':
                        (int,),
                    'commodity_id':
                        (int,),
                    'price_type_name':
                        (str,),
                    'currency_id':
                        (int,),
                    'price_flag':
                        (str,),
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'latest_value_only':
                        (bool,),
                    'page':
                        (int,),
                    'format':
                        (str,),
                    'env':
                        (str,),
                },
                'attribute_map': {
                    'country_code': 'countryCode',
                    'market_id': 'marketID',
                    'commodity_id': 'commodityID',
                    'price_type_name': 'priceTypeName',
                    'currency_id': 'currencyID',
                    'price_flag': 'priceFlag',
                    'start_date': 'startDate',
                    'end_date': 'endDate',
                    'latest_value_only': 'latestValueOnly',
                    'page': 'page',
                    'format': 'format',
                    'env': 'env',
                },
                'location_map': {
                    'country_code': 'query',
                    'market_id': 'query',
                    'commodity_id': 'query',
                    'price_type_name': 'query',
                    'currency_id': 'query',
                    'price_flag': 'query',
                    'start_date': 'query',
                    'end_date': 'query',
                    'latest_value_only': 'query',
                    'page': 'query',
                    'format': 'query',
                    'env': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json',
                    'text/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.market_prices_price_weekly_get_endpoint = _Endpoint(
            settings={
                'response_type': (PagedCommodityWeeklyAggregatedPriceListDTO,),
                'auth': [
                    'default'
                ],
                'endpoint_path': '/MarketPrices/PriceWeekly',
                'operation_id': 'market_prices_price_weekly_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'country_code',
                    'market_id',
                    'commodity_id',
                    'price_type_name',
                    'currency_id',
                    'price_flag',
                    'start_date',
                    'end_date',
                    'latest_value_only',
                    'page',
                    'format',
                    'env',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'env',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('env',): {

                        "PROD": "prod",
                        "DEV": "dev"
                    },
                },
                'openapi_types': {
                    'country_code':
                        (str,),
                    'market_id':
                        (int,),
                    'commodity_id':
                        (int,),
                    'price_type_name':
                        (str,),
                    'currency_id':
                        (int,),
                    'price_flag':
                        (str,),
                    'start_date':
                        (datetime,),
                    'end_date':
                        (datetime,),
                    'latest_value_only':
                        (bool,),
                    'page':
                        (int,),
                    'format':
                        (str,),
                    'env':
                        (str,),
                },
                'attribute_map': {
                    'country_code': 'countryCode',
                    'market_id': 'marketID',
                    'commodity_id': 'commodityID',
                    'price_type_name': 'priceTypeName',
                    'currency_id': 'currencyID',
                    'price_flag': 'priceFlag',
                    'start_date': 'startDate',
                    'end_date': 'endDate',
                    'latest_value_only': 'latestValueOnly',
                    'page': 'page',
                    'format': 'format',
                    'env': 'env',
                },
                'location_map': {
                    'country_code': 'query',
                    'market_id': 'query',
                    'commodity_id': 'query',
                    'price_type_name': 'query',
                    'currency_id': 'query',
                    'price_flag': 'query',
                    'start_date': 'query',
                    'end_date': 'query',
                    'latest_value_only': 'query',
                    'page': 'query',
                    'format': 'query',
                    'env': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json',
                    'text/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def market_prices_alps_get(
        self,
        **kwargs
    ):
        """Returns time series values of ALPS and PEWI.  # noqa: E501

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access%20Policy-Open-green)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  Returns the full time series of the Alert for Price Spikes (ALPS) and the value of the Price Early Warning Index (PEWI). Methodology is available in [DataViz](https://dataviz.vam.wfp.org/) and [VAM-Resource Centre](https://resources.vam.wfp.org/). Country code, either ISO-3166 Alpha 3 code or the VAM internal admin0code is mandatory.    **Data Controller** - Wael Attia  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.market_prices_alps_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            country_code (str): The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.. [optional]
            market_id (int): Unique ID of a Market, as found in /Markets/GeoJSONList. [optional] if omitted the server will use the default value of 0
            commodity_id (int): The exact ID of a Commodity, as found in /Commodities/List. [optional] if omitted the server will use the default value of 0
            price_type_name (str): Price type: [retail|wholesale|farmgate]. [optional] if omitted the server will use the default value of ""
            currency_id (int): The exact ID of a currency, as found in /Currency/List. [optional] if omitted the server will use the default value of 0
            price_flag (str): Type of price data: [actual|aggregate|estimated|forecasted]. [optional] if omitted the server will use the default value of ""
            start_date (datetime): Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24). [optional]
            end_date (datetime): Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24). [optional]
            latest_value_only (bool): [TRUE|FALSE]. [optional] if omitted the server will use the default value of False
            page (int): Page number for paged results. [optional] if omitted the server will use the default value of 1
            format (str): Output format: [JSON|CSV] Json is the default value. [optional] if omitted the server will use the default value of "json"
            env (str): Environment.   * `prod` - api.vam.wfp.org   * `dev` - api.vam.wfp.org. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ViewExtendedAlpsValuePagedResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.market_prices_alps_get_endpoint.call_with_http_info(**kwargs)

    def market_prices_price_daily_get(
        self,
        **kwargs
    ):
        """Returns a daily time series of commodity market prices.  # noqa: E501

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access%20Policy-Open-green)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  This is the highest frequency available. Data is flagged according to its pre-processing characteristics.  Actual data is collected originally with daily frequency; aggregated data returns an empty list; imputed data is an estimation of missing values in the time series, obtained through the R Amelia-II package;        forecasted data is a six months prediction obtained through different methods, which are reported in the API.  For country specific meta-data please refer to documentation available in DataLibrary. For specific methodological notes on forecasts and imputations refer to the dedicated page in DataViz.  Country code, either ISO-3166 Alpha 3 code or the VAM internal admin0code is mandatory.    **Data Controller** - Wael Attia  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.market_prices_price_daily_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            country_code (str): The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.. [optional]
            market_id (int): Unique ID of a Market, as found in /Markets/GeoJSONList. [optional] if omitted the server will use the default value of 0
            commodity_id (int): The exact ID of a Commodity, as found in /Commodities/List. [optional] if omitted the server will use the default value of 0
            price_type_name (str): Price type: [retail|wholesale|farmgate]. [optional] if omitted the server will use the default value of ""
            currency_id (int): The exact ID of a currency, as found in /Currency/List. [optional] if omitted the server will use the default value of 0
            price_flag (str): Type of price data: [actual|aggregate|estimated|forecasted]. [optional] if omitted the server will use the default value of ""
            start_date (datetime): Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24). [optional]
            end_date (datetime): Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24). [optional]
            latest_value_only (bool): [TRUE|FALSE]. [optional] if omitted the server will use the default value of False
            page (int): Page number for paged results. [optional] if omitted the server will use the default value of 1
            format (str): Output format: [JSON|CSV] Json is the default value. [optional] if omitted the server will use the default value of "json"
            env (str): Environment.   * `prod` - api.vam.wfp.org   * `dev` - api.vam.wfp.org. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ViewExtendedAggregatedPricePagedResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.market_prices_price_daily_get_endpoint.call_with_http_info(**kwargs)

    def market_prices_price_monthly_get(
        self,
        **kwargs
    ):
        """Returns a monthly time series of commodity market prices.  # noqa: E501

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access%20Policy-Open-green)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  This is the lowest frequency available and the most complete data source. Data is flagged according to its pre-processing characteristics. actual data is collected originally with monthly frequency; aggregated data is collected with higher frequency (daily or weekly) averaged through a weighted mean to monthly; imputed data is an estimation of missing values in the time series, obtained through the R Amelia-II package; forecasted data is a six months prediction obtained through different methods, which are reported in the API. For country specific meta-data please refer to documentation available in [DataLibrary](https://datalib.vam.wfp.org/). For specific methodological notes on forecasts and imputations refer to the dedicated page in [DataViz](https://dataviz.vam.wfp.org/). Country code, either ISO-3166 Alpha 3 code or the VAM internal admin0code is mandatory.    **Data Controller** - Wael Attia  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.market_prices_price_monthly_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            country_code (str): The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.. [optional]
            market_id (int): Unique ID of a Market, as found in /Markets/GeoJSONList. [optional] if omitted the server will use the default value of 0
            commodity_id (int): The exact ID of a Commodity, as found in /Commodities/List. [optional] if omitted the server will use the default value of 0
            price_type_name (str): Price type: [retail|wholesale|farmgate]. [optional] if omitted the server will use the default value of ""
            currency_id (int): The exact ID of a currency, as found in /Currency/List. [optional] if omitted the server will use the default value of 0
            price_flag (str): Type of price data: [actual|aggregate|estimated|forecasted]. [optional] if omitted the server will use the default value of ""
            start_date (datetime): Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24). [optional]
            end_date (datetime): Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24). [optional]
            latest_value_only (bool): [TRUE|FALSE]. [optional] if omitted the server will use the default value of False
            page (int): Page number for paged results. [optional] if omitted the server will use the default value of 1
            format (str): Output format: [JSON|CSV] Json is the default value. [optional] if omitted the server will use the default value of "json"
            env (str): Environment.   * `prod` - api.vam.wfp.org   * `dev` - api.vam.wfp.org. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ViewExtendedAggregatedPricePagedResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.market_prices_price_monthly_get_endpoint.call_with_http_info(**kwargs)

    def market_prices_price_raw_get(
        self,
        **kwargs
    ):
        """Returns original commodity market prices  # noqa: E501

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access%20Policy-Restricted-yellow)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Official%20Use%20Only-yellow)]()  ### This endpoint is restricted, it requires the scope: \"vamdatabridges_marketprices-priceraw_get\"  Restricted endpoint. Returns the original data with the entire Commodity Price Metadata as inserted by the focal point, which might contain sensitive or personal informatio. Country code, either ISO-3166 Alpha 3 code or the VAM internal admin0code is mandatory.    **Data Controller** - Wael Attia  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.market_prices_price_raw_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            country_code (str): The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.. [optional]
            market_id (int): Unique ID of a Market, as found in /Markets/GeoJSONList. [optional] if omitted the server will use the default value of 0
            commodity_id (int): The exact ID of a Commodity, as found in /Commodities/List. [optional] if omitted the server will use the default value of 0
            price_type_name (str): Price type: [retail|wholesale|farmgate]. [optional] if omitted the server will use the default value of ""
            currency_id (int): The exact ID of a currency, as found in /Currency/List. [optional] if omitted the server will use the default value of 0
            price_flag (str): Type of price data: [actual|aggregate|estimated|forecasted]. [optional] if omitted the server will use the default value of ""
            start_date (datetime): Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24). [optional]
            end_date (datetime): Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24). [optional]
            latest_value_only (bool): [TRUE|FALSE]. [optional] if omitted the server will use the default value of False
            page (int): Page number for paged results. [optional] if omitted the server will use the default value of 1
            format (str): Output format: [JSON|CSV] Json is the default value. [optional] if omitted the server will use the default value of "json"
            env (str): Environment.   * `prod` - api.vam.wfp.org   * `dev` - api.vam.wfp.org. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PagedCommodityPriceListDTO
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.market_prices_price_raw_get_endpoint.call_with_http_info(**kwargs)

    def market_prices_price_weekly_get(
        self,
        **kwargs
    ):
        """Returns a weekly time series of commodity market prices.  # noqa: E501

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access%20Policy-Open-green)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  Weeks used as reference are the International Organization for Standardization (ISO) week-numbering year (ISO-8601). Data is flagged according to its pre-processing characteristics. Aactual data is collected originally with weekly frequency; aggregated data is collected with higher frequency (daily) averaged through a weighted mean to weekly; imputed data is an estimation of missing values in the time series, obtained through the R Amelia-II package; forecasted data is a six months prediction obtained through different methods, which are reported in the API. For country specific meta-data please refer to documentation available in [DataLibrary](https://datalib.vam.wfp.org/). For specific methodological notes on forecasts and imputations refer to the dedicated page in [DataViz](https://dataviz.vam.wfp.org/). Country code, either ISO-3166 Alpha 3 code or the VAM internal admin0code is mandatory.    **Data Controller** - Wael Attia  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.market_prices_price_weekly_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            country_code (str): The code to identify the country. It can be a ISO-3166 Alpha 3 code or the VAM internal admin0code.. [optional]
            market_id (int): Unique ID of a Market, as found in /Markets/GeoJSONList. [optional] if omitted the server will use the default value of 0
            commodity_id (int): The exact ID of a Commodity, as found in /Commodities/List. [optional] if omitted the server will use the default value of 0
            price_type_name (str): Price type: [retail|wholesale|farmgate]. [optional] if omitted the server will use the default value of ""
            currency_id (int): The exact ID of a currency, as found in /Currency/List. [optional] if omitted the server will use the default value of 0
            price_flag (str): Type of price data: [actual|aggregate|estimated|forecasted]. [optional] if omitted the server will use the default value of ""
            start_date (datetime): Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24). [optional]
            end_date (datetime): Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \\\"-\\\" month \\\"-\\\" day (e.g. 2020/06/24). [optional]
            latest_value_only (bool): [TRUE|FALSE]. [optional] if omitted the server will use the default value of False
            page (int): Page number for paged results. [optional] if omitted the server will use the default value of 1
            format (str): Output format: [JSON|CSV] Json is the default value. [optional] if omitted the server will use the default value of "json"
            env (str): Environment.   * `prod` - api.vam.wfp.org   * `dev` - api.vam.wfp.org. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PagedCommodityWeeklyAggregatedPriceListDTO
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.market_prices_price_weekly_get_endpoint.call_with_http_info(**kwargs)

