# coding: utf-8

"""
    VAM-Data-Bridges

    API Documentation of the **DataBridges** platform: https://databridges.vam.wfp.org/. For API discussions and details: #api-integration-vam-data-bridges on Slack, [Teams channel](https://teams.microsoft.com/l/team/19%3a4ca595f7681f4ffa8a86b7af58832e8d%40thread.skype/conversations?groupId=cbd1e508-c6e8-459d-96b7-6cac3039c42c&tenantId=462ad9ae-d7d9-4206-b874-71b1e079776f) **API Integration** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

    The version of the OpenAPI document: 4.1.0
    Contact: wfp.economicanalysis@wfp.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from data_bridges_client.models.paged_processed_data_dto import PagedProcessedDataDTO
from data_bridges_client.models.paged_survey_list_dto import PagedSurveyListDTO
from data_bridges_client.models.paged_survey_responses_dto import PagedSurveyResponsesDTO

from data_bridges_client.api_client import ApiClient, RequestSerialized
from data_bridges_client.api_response import ApiResponse
from data_bridges_client.rest import RESTResponseType


class SurveysApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def m_fi_surveys_base_data_get(
        self,
        survey_id: Annotated[Optional[StrictInt], Field(description="unique identifier for the collected data, as retrieved from /Surveys API.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="page number for paged results")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="page size for paged results, default value is 20.")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PagedSurveyResponsesDTO:
        """Get data that includes the core Market Functionality Index (MFI) fields only by Survey ID

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access_Policy-TEC_Architecture_approval_required-yellow)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  ### This endpoint is restricted, it requires the scope: \"vamdatabridges_mfi-surveys-basedata_get\"      **Data Controller** - Wael ATTIA  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param survey_id: unique identifier for the collected data, as retrieved from /Surveys API.
        :type survey_id: int
        :param page: page number for paged results
        :type page: int
        :param page_size: page size for paged results, default value is 20.
        :type page_size: int
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._m_fi_surveys_base_data_get_serialize(
            survey_id=survey_id,
            page=page,
            page_size=page_size,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedSurveyResponsesDTO",
            '400': "BadRequestDTO",
            '404': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def m_fi_surveys_base_data_get_with_http_info(
        self,
        survey_id: Annotated[Optional[StrictInt], Field(description="unique identifier for the collected data, as retrieved from /Surveys API.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="page number for paged results")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="page size for paged results, default value is 20.")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PagedSurveyResponsesDTO]:
        """Get data that includes the core Market Functionality Index (MFI) fields only by Survey ID

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access_Policy-TEC_Architecture_approval_required-yellow)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  ### This endpoint is restricted, it requires the scope: \"vamdatabridges_mfi-surveys-basedata_get\"      **Data Controller** - Wael ATTIA  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param survey_id: unique identifier for the collected data, as retrieved from /Surveys API.
        :type survey_id: int
        :param page: page number for paged results
        :type page: int
        :param page_size: page size for paged results, default value is 20.
        :type page_size: int
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._m_fi_surveys_base_data_get_serialize(
            survey_id=survey_id,
            page=page,
            page_size=page_size,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedSurveyResponsesDTO",
            '400': "BadRequestDTO",
            '404': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def m_fi_surveys_base_data_get_without_preload_content(
        self,
        survey_id: Annotated[Optional[StrictInt], Field(description="unique identifier for the collected data, as retrieved from /Surveys API.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="page number for paged results")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="page size for paged results, default value is 20.")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get data that includes the core Market Functionality Index (MFI) fields only by Survey ID

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access_Policy-TEC_Architecture_approval_required-yellow)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  ### This endpoint is restricted, it requires the scope: \"vamdatabridges_mfi-surveys-basedata_get\"      **Data Controller** - Wael ATTIA  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param survey_id: unique identifier for the collected data, as retrieved from /Surveys API.
        :type survey_id: int
        :param page: page number for paged results
        :type page: int
        :param page_size: page size for paged results, default value is 20.
        :type page_size: int
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._m_fi_surveys_base_data_get_serialize(
            survey_id=survey_id,
            page=page,
            page_size=page_size,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedSurveyResponsesDTO",
            '400': "BadRequestDTO",
            '404': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _m_fi_surveys_base_data_get_serialize(
        self,
        survey_id,
        page,
        page_size,
        env,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if survey_id is not None:
            
            _query_params.append(('surveyID', survey_id))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if env is not None:
            
            _query_params.append(('env', env))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/plain', 
                'application/json', 
                'text/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'default'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/MFI/Surveys/BaseData',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def m_fi_surveys_full_data_get(
        self,
        survey_id: Annotated[Optional[StrictInt], Field(description="unique identifier for the collected data, as retrieved from /Surveys API.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format: [JSON|CSV] Json is the default value")] = None,
        page: Annotated[Optional[StrictInt], Field(description="page number for paged results")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="page size for paged results, default value is 20.")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PagedSurveyResponsesDTO:
        """Get a full dataset that includes all the fields included in the survey in addition to the core Market Functionality Index (MFI) fields by Survey ID. To access this data, please contact global.mfi@wfp.org for authorization.

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access%20Policy-TEC_Architecture_+_Service_Owner_approvals_required-yellow)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Official%20Use%20Only-yellow)]()  ### This endpoint is restricted, it requires the scope: \"vamdatabridges_mfi-surveys-fulldata_get\"      **Data Controller** - Wael ATTIA  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param survey_id: unique identifier for the collected data, as retrieved from /Surveys API.
        :type survey_id: int
        :param format: Output format: [JSON|CSV] Json is the default value
        :type format: str
        :param page: page number for paged results
        :type page: int
        :param page_size: page size for paged results, default value is 20.
        :type page_size: int
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._m_fi_surveys_full_data_get_serialize(
            survey_id=survey_id,
            format=format,
            page=page,
            page_size=page_size,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedSurveyResponsesDTO",
            '400': "BadRequestDTO",
            '404': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def m_fi_surveys_full_data_get_with_http_info(
        self,
        survey_id: Annotated[Optional[StrictInt], Field(description="unique identifier for the collected data, as retrieved from /Surveys API.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format: [JSON|CSV] Json is the default value")] = None,
        page: Annotated[Optional[StrictInt], Field(description="page number for paged results")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="page size for paged results, default value is 20.")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PagedSurveyResponsesDTO]:
        """Get a full dataset that includes all the fields included in the survey in addition to the core Market Functionality Index (MFI) fields by Survey ID. To access this data, please contact global.mfi@wfp.org for authorization.

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access%20Policy-TEC_Architecture_+_Service_Owner_approvals_required-yellow)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Official%20Use%20Only-yellow)]()  ### This endpoint is restricted, it requires the scope: \"vamdatabridges_mfi-surveys-fulldata_get\"      **Data Controller** - Wael ATTIA  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param survey_id: unique identifier for the collected data, as retrieved from /Surveys API.
        :type survey_id: int
        :param format: Output format: [JSON|CSV] Json is the default value
        :type format: str
        :param page: page number for paged results
        :type page: int
        :param page_size: page size for paged results, default value is 20.
        :type page_size: int
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._m_fi_surveys_full_data_get_serialize(
            survey_id=survey_id,
            format=format,
            page=page,
            page_size=page_size,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedSurveyResponsesDTO",
            '400': "BadRequestDTO",
            '404': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def m_fi_surveys_full_data_get_without_preload_content(
        self,
        survey_id: Annotated[Optional[StrictInt], Field(description="unique identifier for the collected data, as retrieved from /Surveys API.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format: [JSON|CSV] Json is the default value")] = None,
        page: Annotated[Optional[StrictInt], Field(description="page number for paged results")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="page size for paged results, default value is 20.")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a full dataset that includes all the fields included in the survey in addition to the core Market Functionality Index (MFI) fields by Survey ID. To access this data, please contact global.mfi@wfp.org for authorization.

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access%20Policy-TEC_Architecture_+_Service_Owner_approvals_required-yellow)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Official%20Use%20Only-yellow)]()  ### This endpoint is restricted, it requires the scope: \"vamdatabridges_mfi-surveys-fulldata_get\"      **Data Controller** - Wael ATTIA  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param survey_id: unique identifier for the collected data, as retrieved from /Surveys API.
        :type survey_id: int
        :param format: Output format: [JSON|CSV] Json is the default value
        :type format: str
        :param page: page number for paged results
        :type page: int
        :param page_size: page size for paged results, default value is 20.
        :type page_size: int
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._m_fi_surveys_full_data_get_serialize(
            survey_id=survey_id,
            format=format,
            page=page,
            page_size=page_size,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedSurveyResponsesDTO",
            '400': "BadRequestDTO",
            '404': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _m_fi_surveys_full_data_get_serialize(
        self,
        survey_id,
        format,
        page,
        page_size,
        env,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if survey_id is not None:
            
            _query_params.append(('surveyID', survey_id))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if env is not None:
            
            _query_params.append(('env', env))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/plain', 
                'application/json', 
                'text/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'default'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/MFI/Surveys/FullData',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def m_fi_surveys_get(
        self,
        adm0_code: Annotated[Optional[StrictInt], Field(description="code for the country as retrieved from https://api.vam.wfp.org/geodata/CountriesInRegion")] = None,
        page: Annotated[Optional[StrictInt], Field(description="page number for paged results")] = None,
        start_date: Annotated[Optional[datetime], Field(description="starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \"-\" month \"-\" day (e.g. 2020/06/24)")] = None,
        end_date: Annotated[Optional[datetime], Field(description="ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \"-\" month \"-\" day (e.g. 2020/06/24)")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PagedSurveyListDTO:
        """Retrieve 1) Survey IDs, 2) their corresponding XLS Form IDs, and 3) Base XLS Form of all MFI surveys conducted in a country.   A date of reference, SurveyDate, for the data collection is set by the officer responsible for the upload for each survey.

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access_Policy-TEC_Architecture_approval_required-yellow)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  ### This endpoint is restricted, it requires the scope: \"vamdatabridges_mfi-surveys_get\"      **Data Controller** - Wael ATTIA  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param adm0_code: code for the country as retrieved from https://api.vam.wfp.org/geodata/CountriesInRegion
        :type adm0_code: int
        :param page: page number for paged results
        :type page: int
        :param start_date: starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \"-\" month \"-\" day (e.g. 2020/06/24)
        :type start_date: datetime
        :param end_date: ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \"-\" month \"-\" day (e.g. 2020/06/24)
        :type end_date: datetime
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._m_fi_surveys_get_serialize(
            adm0_code=adm0_code,
            page=page,
            start_date=start_date,
            end_date=end_date,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedSurveyListDTO",
            '400': "BadRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def m_fi_surveys_get_with_http_info(
        self,
        adm0_code: Annotated[Optional[StrictInt], Field(description="code for the country as retrieved from https://api.vam.wfp.org/geodata/CountriesInRegion")] = None,
        page: Annotated[Optional[StrictInt], Field(description="page number for paged results")] = None,
        start_date: Annotated[Optional[datetime], Field(description="starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \"-\" month \"-\" day (e.g. 2020/06/24)")] = None,
        end_date: Annotated[Optional[datetime], Field(description="ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \"-\" month \"-\" day (e.g. 2020/06/24)")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PagedSurveyListDTO]:
        """Retrieve 1) Survey IDs, 2) their corresponding XLS Form IDs, and 3) Base XLS Form of all MFI surveys conducted in a country.   A date of reference, SurveyDate, for the data collection is set by the officer responsible for the upload for each survey.

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access_Policy-TEC_Architecture_approval_required-yellow)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  ### This endpoint is restricted, it requires the scope: \"vamdatabridges_mfi-surveys_get\"      **Data Controller** - Wael ATTIA  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param adm0_code: code for the country as retrieved from https://api.vam.wfp.org/geodata/CountriesInRegion
        :type adm0_code: int
        :param page: page number for paged results
        :type page: int
        :param start_date: starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \"-\" month \"-\" day (e.g. 2020/06/24)
        :type start_date: datetime
        :param end_date: ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \"-\" month \"-\" day (e.g. 2020/06/24)
        :type end_date: datetime
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._m_fi_surveys_get_serialize(
            adm0_code=adm0_code,
            page=page,
            start_date=start_date,
            end_date=end_date,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedSurveyListDTO",
            '400': "BadRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def m_fi_surveys_get_without_preload_content(
        self,
        adm0_code: Annotated[Optional[StrictInt], Field(description="code for the country as retrieved from https://api.vam.wfp.org/geodata/CountriesInRegion")] = None,
        page: Annotated[Optional[StrictInt], Field(description="page number for paged results")] = None,
        start_date: Annotated[Optional[datetime], Field(description="starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \"-\" month \"-\" day (e.g. 2020/06/24)")] = None,
        end_date: Annotated[Optional[datetime], Field(description="ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \"-\" month \"-\" day (e.g. 2020/06/24)")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve 1) Survey IDs, 2) their corresponding XLS Form IDs, and 3) Base XLS Form of all MFI surveys conducted in a country.   A date of reference, SurveyDate, for the data collection is set by the officer responsible for the upload for each survey.

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access_Policy-TEC_Architecture_approval_required-yellow)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  ### This endpoint is restricted, it requires the scope: \"vamdatabridges_mfi-surveys_get\"      **Data Controller** - Wael ATTIA  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param adm0_code: code for the country as retrieved from https://api.vam.wfp.org/geodata/CountriesInRegion
        :type adm0_code: int
        :param page: page number for paged results
        :type page: int
        :param start_date: starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \"-\" month \"-\" day (e.g. 2020/06/24)
        :type start_date: datetime
        :param end_date: ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \"-\" month \"-\" day (e.g. 2020/06/24)
        :type end_date: datetime
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._m_fi_surveys_get_serialize(
            adm0_code=adm0_code,
            page=page,
            start_date=start_date,
            end_date=end_date,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedSurveyListDTO",
            '400': "BadRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _m_fi_surveys_get_serialize(
        self,
        adm0_code,
        page,
        start_date,
        end_date,
        env,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if adm0_code is not None:
            
            _query_params.append(('adm0Code', adm0_code))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if start_date is not None:
            if isinstance(start_date, datetime):
                _query_params.append(
                    (
                        'startDate',
                        start_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            if isinstance(end_date, datetime):
                _query_params.append(
                    (
                        'endDate',
                        end_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endDate', end_date))
            
        if env is not None:
            
            _query_params.append(('env', env))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'default'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/MFI/Surveys',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def m_fi_surveys_processed_data_get(
        self,
        survey_id: Annotated[Optional[StrictInt], Field(description="The ID of the survey")] = None,
        page: Annotated[Optional[StrictInt], Field(description="page number for paged results")] = None,
        page_size: Optional[StrictInt] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format: [JSON|CSV] Json is the default value")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \"-\" month \"-\" day (e.g. 2020/06/24)")] = None,
        end_date: Annotated[Optional[datetime], Field(description="Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \"-\" month \"-\" day (e.g. 2020/06/24)")] = None,
        adm0_codes: Annotated[Optional[StrictStr], Field(description="Code for the country as retrieved from https://api.vam.wfp.org/geodata/CountriesInRegion")] = None,
        market_id: Annotated[Optional[StrictInt], Field(description="The ID of the market")] = None,
        survey_type: Annotated[Optional[StrictStr], Field(description="The survey type")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PagedProcessedDataDTO:
        """Get a MFI processed data in long format; levels indicate the data aggregation level 1) Normalized Score, 2) Trader Aggregate Score,   3) Market Aggregate Score, 4) Trader Median, 5) Trader Mean, 6) Market Mean; each line corresponds to one of the nine dimensions of scores   plus the final MFI aggregate score; 1) Assortment, 2) Availability, 3) Price, 4) Resilience, 5) Competition, 6) Infrastructure, 7) Service,   8) Quality, 9) Access and Protection, and 10) MFI final score; the variable label describes each variable and its value range

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access_Policy-TEC_Architecture_approval_required-yellow)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  ### This endpoint is restricted, it requires the scope: \"vamdatabridges_mfi-surveys-processeddata_get\"      **Data Controller** - Wael ATTIA  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param survey_id: The ID of the survey
        :type survey_id: int
        :param page: page number for paged results
        :type page: int
        :param page_size:
        :type page_size: int
        :param format: Output format: [JSON|CSV] Json is the default value
        :type format: str
        :param start_date: Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \"-\" month \"-\" day (e.g. 2020/06/24)
        :type start_date: datetime
        :param end_date: Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \"-\" month \"-\" day (e.g. 2020/06/24)
        :type end_date: datetime
        :param adm0_codes: Code for the country as retrieved from https://api.vam.wfp.org/geodata/CountriesInRegion
        :type adm0_codes: str
        :param market_id: The ID of the market
        :type market_id: int
        :param survey_type: The survey type
        :type survey_type: str
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._m_fi_surveys_processed_data_get_serialize(
            survey_id=survey_id,
            page=page,
            page_size=page_size,
            format=format,
            start_date=start_date,
            end_date=end_date,
            adm0_codes=adm0_codes,
            market_id=market_id,
            survey_type=survey_type,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedProcessedDataDTO",
            '400': "BadRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def m_fi_surveys_processed_data_get_with_http_info(
        self,
        survey_id: Annotated[Optional[StrictInt], Field(description="The ID of the survey")] = None,
        page: Annotated[Optional[StrictInt], Field(description="page number for paged results")] = None,
        page_size: Optional[StrictInt] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format: [JSON|CSV] Json is the default value")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \"-\" month \"-\" day (e.g. 2020/06/24)")] = None,
        end_date: Annotated[Optional[datetime], Field(description="Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \"-\" month \"-\" day (e.g. 2020/06/24)")] = None,
        adm0_codes: Annotated[Optional[StrictStr], Field(description="Code for the country as retrieved from https://api.vam.wfp.org/geodata/CountriesInRegion")] = None,
        market_id: Annotated[Optional[StrictInt], Field(description="The ID of the market")] = None,
        survey_type: Annotated[Optional[StrictStr], Field(description="The survey type")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PagedProcessedDataDTO]:
        """Get a MFI processed data in long format; levels indicate the data aggregation level 1) Normalized Score, 2) Trader Aggregate Score,   3) Market Aggregate Score, 4) Trader Median, 5) Trader Mean, 6) Market Mean; each line corresponds to one of the nine dimensions of scores   plus the final MFI aggregate score; 1) Assortment, 2) Availability, 3) Price, 4) Resilience, 5) Competition, 6) Infrastructure, 7) Service,   8) Quality, 9) Access and Protection, and 10) MFI final score; the variable label describes each variable and its value range

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access_Policy-TEC_Architecture_approval_required-yellow)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  ### This endpoint is restricted, it requires the scope: \"vamdatabridges_mfi-surveys-processeddata_get\"      **Data Controller** - Wael ATTIA  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param survey_id: The ID of the survey
        :type survey_id: int
        :param page: page number for paged results
        :type page: int
        :param page_size:
        :type page_size: int
        :param format: Output format: [JSON|CSV] Json is the default value
        :type format: str
        :param start_date: Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \"-\" month \"-\" day (e.g. 2020/06/24)
        :type start_date: datetime
        :param end_date: Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \"-\" month \"-\" day (e.g. 2020/06/24)
        :type end_date: datetime
        :param adm0_codes: Code for the country as retrieved from https://api.vam.wfp.org/geodata/CountriesInRegion
        :type adm0_codes: str
        :param market_id: The ID of the market
        :type market_id: int
        :param survey_type: The survey type
        :type survey_type: str
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._m_fi_surveys_processed_data_get_serialize(
            survey_id=survey_id,
            page=page,
            page_size=page_size,
            format=format,
            start_date=start_date,
            end_date=end_date,
            adm0_codes=adm0_codes,
            market_id=market_id,
            survey_type=survey_type,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedProcessedDataDTO",
            '400': "BadRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def m_fi_surveys_processed_data_get_without_preload_content(
        self,
        survey_id: Annotated[Optional[StrictInt], Field(description="The ID of the survey")] = None,
        page: Annotated[Optional[StrictInt], Field(description="page number for paged results")] = None,
        page_size: Optional[StrictInt] = None,
        format: Annotated[Optional[StrictStr], Field(description="Output format: [JSON|CSV] Json is the default value")] = None,
        start_date: Annotated[Optional[datetime], Field(description="Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \"-\" month \"-\" day (e.g. 2020/06/24)")] = None,
        end_date: Annotated[Optional[datetime], Field(description="Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \"-\" month \"-\" day (e.g. 2020/06/24)")] = None,
        adm0_codes: Annotated[Optional[StrictStr], Field(description="Code for the country as retrieved from https://api.vam.wfp.org/geodata/CountriesInRegion")] = None,
        market_id: Annotated[Optional[StrictInt], Field(description="The ID of the market")] = None,
        survey_type: Annotated[Optional[StrictStr], Field(description="The survey type")] = None,
        env: Annotated[Optional[StrictStr], Field(description="Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a MFI processed data in long format; levels indicate the data aggregation level 1) Normalized Score, 2) Trader Aggregate Score,   3) Market Aggregate Score, 4) Trader Median, 5) Trader Mean, 6) Market Mean; each line corresponds to one of the nine dimensions of scores   plus the final MFI aggregate score; 1) Assortment, 2) Availability, 3) Price, 4) Resilience, 5) Competition, 6) Infrastructure, 7) Service,   8) Quality, 9) Access and Protection, and 10) MFI final score; the variable label describes each variable and its value range

          [![Generic badge](https://img.shields.io/badge/Maturity%20Level-Production%20Ready-green)]()  [![Generic badge](https://img.shields.io/badge/Access_Policy-TEC_Architecture_approval_required-yellow)]()  [![Generic badge](https://img.shields.io/badge/Data%20Classification-Public-green)]()  ### This endpoint is restricted, it requires the scope: \"vamdatabridges_mfi-surveys-processeddata_get\"      **Data Controller** - Wael ATTIA  **API Integration Pattern** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

        :param survey_id: The ID of the survey
        :type survey_id: int
        :param page: page number for paged results
        :type page: int
        :param page_size:
        :type page_size: int
        :param format: Output format: [JSON|CSV] Json is the default value
        :type format: str
        :param start_date: Starting date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \"-\" month \"-\" day (e.g. 2020/06/24)
        :type start_date: datetime
        :param end_date: Ending date for the range in which data was collected. Use the date formats defined by RFC 3339 ; use strings matching year \"-\" month \"-\" day (e.g. 2020/06/24)
        :type end_date: datetime
        :param adm0_codes: Code for the country as retrieved from https://api.vam.wfp.org/geodata/CountriesInRegion
        :type adm0_codes: str
        :param market_id: The ID of the market
        :type market_id: int
        :param survey_type: The survey type
        :type survey_type: str
        :param env: Environment.   * `prod` - api.vam.wfp.org   * `dev` - dev.api.vam.wfp.org
        :type env: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._m_fi_surveys_processed_data_get_serialize(
            survey_id=survey_id,
            page=page,
            page_size=page_size,
            format=format,
            start_date=start_date,
            end_date=end_date,
            adm0_codes=adm0_codes,
            market_id=market_id,
            survey_type=survey_type,
            env=env,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PagedProcessedDataDTO",
            '400': "BadRequestDTO",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _m_fi_surveys_processed_data_get_serialize(
        self,
        survey_id,
        page,
        page_size,
        format,
        start_date,
        end_date,
        adm0_codes,
        market_id,
        survey_type,
        env,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if survey_id is not None:
            
            _query_params.append(('surveyID', survey_id))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        if start_date is not None:
            if isinstance(start_date, datetime):
                _query_params.append(
                    (
                        'startDate',
                        start_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            if isinstance(end_date, datetime):
                _query_params.append(
                    (
                        'endDate',
                        end_date.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endDate', end_date))
            
        if adm0_codes is not None:
            
            _query_params.append(('adm0Codes', adm0_codes))
            
        if market_id is not None:
            
            _query_params.append(('marketID', market_id))
            
        if survey_type is not None:
            
            _query_params.append(('surveyType', survey_type))
            
        if env is not None:
            
            _query_params.append(('env', env))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/plain', 
                'application/json', 
                'text/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'default'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/MFI/Surveys/ProcessedData',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


