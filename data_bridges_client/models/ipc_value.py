# coding: utf-8

"""
    VAM-Data-Bridges

    API Documentation of the **DataBridges** platform: https://databridges.vam.wfp.org/. For API discussions and details: #api-integration-vam-data-bridges on Slack, [Teams channel](https://teams.microsoft.com/l/team/19%3a4ca595f7681f4ffa8a86b7af58832e8d%40thread.skype/conversations?groupId=cbd1e508-c6e8-459d-96b7-6cac3039c42c&tenantId=462ad9ae-d7d9-4206-b874-71b1e079776f) **API Integration** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

    The version of the OpenAPI document: 2.0.0
    Contact: wfp.economicanalysis@wfp.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class IpcValue(BaseModel):
    """
    IpcValue
    """ # noqa: E501
    ipc_id: Optional[StrictInt] = Field(default=None, alias="ipcId")
    ipc_year: Optional[StrictInt] = Field(default=None, alias="ipcYear")
    iso3_alpha3: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=3)]] = Field(default=None, alias="iso3Alpha3")
    ipc_is_latest_value: Optional[StrictBool] = Field(default=None, alias="ipcIsLatestValue")
    ipc_country_name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=128)]] = Field(default=None, alias="ipcCountryName")
    ipc_area_name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=128)]] = Field(default=None, alias="ipcAreaName")
    ipc_phase3_population: Optional[StrictInt] = Field(default=None, alias="ipcPhase3Population")
    ipc_phase4_population: Optional[StrictInt] = Field(default=None, alias="ipcPhase4Population")
    ipc_phase5_population: Optional[StrictInt] = Field(default=None, alias="ipcPhase5Population")
    ipc_phase3_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ipcPhase3Percentage")
    ipc_phase4_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ipcPhase4Percentage")
    ipc_phase5_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ipcPhase5Percentage")
    ipc_analysed_population: Optional[StrictInt] = Field(default=None, alias="ipcAnalysedPopulation")
    ipc_analysed_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ipcAnalysedPercentage")
    ipc_analysis_comment: Optional[StrictStr] = Field(default=None, alias="ipcAnalysisComment")
    ipc_data_type: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=256)]] = Field(default=None, alias="ipcDataType")
    ipc_data_source: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=128)]] = Field(default=None, alias="ipcDataSource")
    ipc_reference_period: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=256)]] = Field(default=None, alias="ipcReferencePeriod")
    ipc_create_date: Optional[datetime] = Field(default=None, alias="ipcCreateDate")
    ipc_update_date: Optional[datetime] = Field(default=None, alias="ipcUpdateDate")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["ipcId", "ipcYear", "iso3Alpha3", "ipcIsLatestValue", "ipcCountryName", "ipcAreaName", "ipcPhase3Population", "ipcPhase4Population", "ipcPhase5Population", "ipcPhase3Percentage", "ipcPhase4Percentage", "ipcPhase5Percentage", "ipcAnalysedPopulation", "ipcAnalysedPercentage", "ipcAnalysisComment", "ipcDataType", "ipcDataSource", "ipcReferencePeriod", "ipcCreateDate", "ipcUpdateDate"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of IpcValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "additional_properties",
            },
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if iso3_alpha3 (nullable) is None
        # and model_fields_set contains the field
        if self.iso3_alpha3 is None and "iso3_alpha3" in self.model_fields_set:
            _dict['iso3Alpha3'] = None

        # set to None if ipc_country_name (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_country_name is None and "ipc_country_name" in self.model_fields_set:
            _dict['ipcCountryName'] = None

        # set to None if ipc_area_name (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_area_name is None and "ipc_area_name" in self.model_fields_set:
            _dict['ipcAreaName'] = None

        # set to None if ipc_phase3_population (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_phase3_population is None and "ipc_phase3_population" in self.model_fields_set:
            _dict['ipcPhase3Population'] = None

        # set to None if ipc_phase4_population (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_phase4_population is None and "ipc_phase4_population" in self.model_fields_set:
            _dict['ipcPhase4Population'] = None

        # set to None if ipc_phase5_population (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_phase5_population is None and "ipc_phase5_population" in self.model_fields_set:
            _dict['ipcPhase5Population'] = None

        # set to None if ipc_phase3_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_phase3_percentage is None and "ipc_phase3_percentage" in self.model_fields_set:
            _dict['ipcPhase3Percentage'] = None

        # set to None if ipc_phase4_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_phase4_percentage is None and "ipc_phase4_percentage" in self.model_fields_set:
            _dict['ipcPhase4Percentage'] = None

        # set to None if ipc_phase5_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_phase5_percentage is None and "ipc_phase5_percentage" in self.model_fields_set:
            _dict['ipcPhase5Percentage'] = None

        # set to None if ipc_analysed_population (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_analysed_population is None and "ipc_analysed_population" in self.model_fields_set:
            _dict['ipcAnalysedPopulation'] = None

        # set to None if ipc_analysed_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_analysed_percentage is None and "ipc_analysed_percentage" in self.model_fields_set:
            _dict['ipcAnalysedPercentage'] = None

        # set to None if ipc_analysis_comment (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_analysis_comment is None and "ipc_analysis_comment" in self.model_fields_set:
            _dict['ipcAnalysisComment'] = None

        # set to None if ipc_data_type (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_data_type is None and "ipc_data_type" in self.model_fields_set:
            _dict['ipcDataType'] = None

        # set to None if ipc_data_source (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_data_source is None and "ipc_data_source" in self.model_fields_set:
            _dict['ipcDataSource'] = None

        # set to None if ipc_reference_period (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_reference_period is None and "ipc_reference_period" in self.model_fields_set:
            _dict['ipcReferencePeriod'] = None

        # set to None if ipc_update_date (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_update_date is None and "ipc_update_date" in self.model_fields_set:
            _dict['ipcUpdateDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of IpcValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ipcId": obj.get("ipcId"),
            "ipcYear": obj.get("ipcYear"),
            "iso3Alpha3": obj.get("iso3Alpha3"),
            "ipcIsLatestValue": obj.get("ipcIsLatestValue"),
            "ipcCountryName": obj.get("ipcCountryName"),
            "ipcAreaName": obj.get("ipcAreaName"),
            "ipcPhase3Population": obj.get("ipcPhase3Population"),
            "ipcPhase4Population": obj.get("ipcPhase4Population"),
            "ipcPhase5Population": obj.get("ipcPhase5Population"),
            "ipcPhase3Percentage": obj.get("ipcPhase3Percentage"),
            "ipcPhase4Percentage": obj.get("ipcPhase4Percentage"),
            "ipcPhase5Percentage": obj.get("ipcPhase5Percentage"),
            "ipcAnalysedPopulation": obj.get("ipcAnalysedPopulation"),
            "ipcAnalysedPercentage": obj.get("ipcAnalysedPercentage"),
            "ipcAnalysisComment": obj.get("ipcAnalysisComment"),
            "ipcDataType": obj.get("ipcDataType"),
            "ipcDataSource": obj.get("ipcDataSource"),
            "ipcReferencePeriod": obj.get("ipcReferencePeriod"),
            "ipcCreateDate": obj.get("ipcCreateDate"),
            "ipcUpdateDate": obj.get("ipcUpdateDate")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


