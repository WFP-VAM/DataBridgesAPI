# coding: utf-8

"""
    VAM-Data-Bridges

    API Documentation of the **DataBridges** platform: https://databridges.vam.wfp.org/. For API discussions and details: #api-integration-vam-data-bridges on Slack, [Teams channel](https://teams.microsoft.com/l/team/19%3a4ca595f7681f4ffa8a86b7af58832e8d%40thread.skype/conversations?groupId=cbd1e508-c6e8-459d-96b7-6cac3039c42c&tenantId=462ad9ae-d7d9-4206-b874-71b1e079776f) **API Integration** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

    The version of the OpenAPI document: 6.0.0
    Contact: wfp.economicanalysis@wfp.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class IpcValue(BaseModel):
    """
    IpcValue
    """ # noqa: E501
    ipc_id: Optional[StrictInt] = Field(default=None, alias="ipcId")
    ipc_year: Optional[StrictInt] = Field(default=None, alias="ipcYear")
    ipc_update_date: Optional[datetime] = Field(default=None, alias="ipcUpdateDate")
    iso3_alpha3: Optional[StrictStr] = Field(default=None, alias="iso3Alpha3")
    ipc_country_name: Optional[StrictStr] = Field(default=None, alias="ipcCountryName")
    ipc_area_name: Optional[StrictStr] = Field(default=None, alias="ipcAreaName")
    ipc_phase3_population: Optional[StrictInt] = Field(default=None, alias="ipcPhase3Population")
    ipc_phase4_population: Optional[StrictInt] = Field(default=None, alias="ipcPhase4Population")
    ipc_phase5_population: Optional[StrictInt] = Field(default=None, alias="ipcPhase5Population")
    ipc_phase35population: Optional[StrictInt] = Field(default=None, alias="ipcPhase35population")
    ipc_phase45population: Optional[StrictInt] = Field(default=None, alias="ipcPhase45population")
    ipc_phase3_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ipcPhase3Percentage")
    ipc_phase4_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ipcPhase4Percentage")
    ipc_phase5_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ipcPhase5Percentage")
    ipc_phase35percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ipcPhase35percentage")
    ipc_phase45percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ipcPhase45percentage")
    ipc_analysed_population: Optional[StrictInt] = Field(default=None, alias="ipcAnalysedPopulation")
    ipc_analysed_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ipcAnalysedPercentage")
    ipc_analysis_comment: Optional[StrictStr] = Field(default=None, alias="ipcAnalysisComment")
    ipc_data_type: Optional[StrictStr] = Field(default=None, alias="ipcDataType")
    ipc_data_source: Optional[StrictStr] = Field(default=None, alias="ipcDataSource")
    ipc_reference_period: Optional[StrictStr] = Field(default=None, alias="ipcReferencePeriod")
    ipc_create_date: Optional[datetime] = Field(default=None, alias="ipcCreateDate")
    ipc_show_on_data_viz: Optional[StrictBool] = Field(default=None, alias="ipcShowOnDataViz")
    ipc_is_latest_value: Optional[StrictBool] = Field(default=None, alias="ipcIsLatestValue")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["ipcId", "ipcYear", "ipcUpdateDate", "iso3Alpha3", "ipcCountryName", "ipcAreaName", "ipcPhase3Population", "ipcPhase4Population", "ipcPhase5Population", "ipcPhase35population", "ipcPhase45population", "ipcPhase3Percentage", "ipcPhase4Percentage", "ipcPhase5Percentage", "ipcPhase35percentage", "ipcPhase45percentage", "ipcAnalysedPopulation", "ipcAnalysedPercentage", "ipcAnalysisComment", "ipcDataType", "ipcDataSource", "ipcReferencePeriod", "ipcCreateDate", "ipcShowOnDataViz", "ipcIsLatestValue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IpcValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if ipc_year (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_year is None and "ipc_year" in self.model_fields_set:
            _dict['ipcYear'] = None

        # set to None if ipc_update_date (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_update_date is None and "ipc_update_date" in self.model_fields_set:
            _dict['ipcUpdateDate'] = None

        # set to None if iso3_alpha3 (nullable) is None
        # and model_fields_set contains the field
        if self.iso3_alpha3 is None and "iso3_alpha3" in self.model_fields_set:
            _dict['iso3Alpha3'] = None

        # set to None if ipc_country_name (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_country_name is None and "ipc_country_name" in self.model_fields_set:
            _dict['ipcCountryName'] = None

        # set to None if ipc_area_name (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_area_name is None and "ipc_area_name" in self.model_fields_set:
            _dict['ipcAreaName'] = None

        # set to None if ipc_phase3_population (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_phase3_population is None and "ipc_phase3_population" in self.model_fields_set:
            _dict['ipcPhase3Population'] = None

        # set to None if ipc_phase4_population (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_phase4_population is None and "ipc_phase4_population" in self.model_fields_set:
            _dict['ipcPhase4Population'] = None

        # set to None if ipc_phase5_population (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_phase5_population is None and "ipc_phase5_population" in self.model_fields_set:
            _dict['ipcPhase5Population'] = None

        # set to None if ipc_phase35population (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_phase35population is None and "ipc_phase35population" in self.model_fields_set:
            _dict['ipcPhase35population'] = None

        # set to None if ipc_phase45population (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_phase45population is None and "ipc_phase45population" in self.model_fields_set:
            _dict['ipcPhase45population'] = None

        # set to None if ipc_phase3_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_phase3_percentage is None and "ipc_phase3_percentage" in self.model_fields_set:
            _dict['ipcPhase3Percentage'] = None

        # set to None if ipc_phase4_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_phase4_percentage is None and "ipc_phase4_percentage" in self.model_fields_set:
            _dict['ipcPhase4Percentage'] = None

        # set to None if ipc_phase5_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_phase5_percentage is None and "ipc_phase5_percentage" in self.model_fields_set:
            _dict['ipcPhase5Percentage'] = None

        # set to None if ipc_phase35percentage (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_phase35percentage is None and "ipc_phase35percentage" in self.model_fields_set:
            _dict['ipcPhase35percentage'] = None

        # set to None if ipc_phase45percentage (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_phase45percentage is None and "ipc_phase45percentage" in self.model_fields_set:
            _dict['ipcPhase45percentage'] = None

        # set to None if ipc_analysed_population (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_analysed_population is None and "ipc_analysed_population" in self.model_fields_set:
            _dict['ipcAnalysedPopulation'] = None

        # set to None if ipc_analysed_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_analysed_percentage is None and "ipc_analysed_percentage" in self.model_fields_set:
            _dict['ipcAnalysedPercentage'] = None

        # set to None if ipc_analysis_comment (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_analysis_comment is None and "ipc_analysis_comment" in self.model_fields_set:
            _dict['ipcAnalysisComment'] = None

        # set to None if ipc_data_type (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_data_type is None and "ipc_data_type" in self.model_fields_set:
            _dict['ipcDataType'] = None

        # set to None if ipc_data_source (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_data_source is None and "ipc_data_source" in self.model_fields_set:
            _dict['ipcDataSource'] = None

        # set to None if ipc_reference_period (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_reference_period is None and "ipc_reference_period" in self.model_fields_set:
            _dict['ipcReferencePeriod'] = None

        # set to None if ipc_create_date (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_create_date is None and "ipc_create_date" in self.model_fields_set:
            _dict['ipcCreateDate'] = None

        # set to None if ipc_show_on_data_viz (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_show_on_data_viz is None and "ipc_show_on_data_viz" in self.model_fields_set:
            _dict['ipcShowOnDataViz'] = None

        # set to None if ipc_is_latest_value (nullable) is None
        # and model_fields_set contains the field
        if self.ipc_is_latest_value is None and "ipc_is_latest_value" in self.model_fields_set:
            _dict['ipcIsLatestValue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IpcValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ipcId": obj.get("ipcId"),
            "ipcYear": obj.get("ipcYear"),
            "ipcUpdateDate": obj.get("ipcUpdateDate"),
            "iso3Alpha3": obj.get("iso3Alpha3"),
            "ipcCountryName": obj.get("ipcCountryName"),
            "ipcAreaName": obj.get("ipcAreaName"),
            "ipcPhase3Population": obj.get("ipcPhase3Population"),
            "ipcPhase4Population": obj.get("ipcPhase4Population"),
            "ipcPhase5Population": obj.get("ipcPhase5Population"),
            "ipcPhase35population": obj.get("ipcPhase35population"),
            "ipcPhase45population": obj.get("ipcPhase45population"),
            "ipcPhase3Percentage": obj.get("ipcPhase3Percentage"),
            "ipcPhase4Percentage": obj.get("ipcPhase4Percentage"),
            "ipcPhase5Percentage": obj.get("ipcPhase5Percentage"),
            "ipcPhase35percentage": obj.get("ipcPhase35percentage"),
            "ipcPhase45percentage": obj.get("ipcPhase45percentage"),
            "ipcAnalysedPopulation": obj.get("ipcAnalysedPopulation"),
            "ipcAnalysedPercentage": obj.get("ipcAnalysedPercentage"),
            "ipcAnalysisComment": obj.get("ipcAnalysisComment"),
            "ipcDataType": obj.get("ipcDataType"),
            "ipcDataSource": obj.get("ipcDataSource"),
            "ipcReferencePeriod": obj.get("ipcReferencePeriod"),
            "ipcCreateDate": obj.get("ipcCreateDate"),
            "ipcShowOnDataViz": obj.get("ipcShowOnDataViz"),
            "ipcIsLatestValue": obj.get("ipcIsLatestValue")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


