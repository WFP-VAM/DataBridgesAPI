# coding: utf-8

"""
    VAM-Data-Bridges

    API Documentation of the **DataBridges** platform: https://databridges.vam.wfp.org/. For API discussions and details: #api-integration-vam-data-bridges on Slack, [Teams channel](https://teams.microsoft.com/l/team/19%3a4ca595f7681f4ffa8a86b7af58832e8d%40thread.skype/conversations?groupId=cbd1e508-c6e8-459d-96b7-6cac3039c42c&tenantId=462ad9ae-d7d9-4206-b874-71b1e079776f) **API Integration** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

    The version of the OpenAPI document: 6.0.0
    Contact: wfp.economicanalysis@wfp.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from data_bridges_client.models.rpme_output_values import RpmeOutputValues
from typing import Optional, Set
from typing_extensions import Self

class RpmeAssessment(BaseModel):
    """
    RpmeAssessment
    """ # noqa: E501
    survey_id: Optional[StrictInt] = Field(default=None, alias="surveyId")
    assessment_date: Optional[datetime] = Field(default=None, alias="assessmentDate")
    shop_id: Optional[StrictInt] = Field(default=None, alias="shopId")
    adm0_code: Optional[StrictInt] = Field(default=None, alias="adm0Code")
    adm1_code: Optional[StrictInt] = Field(default=None, alias="adm1Code")
    adm2_code: Optional[StrictInt] = Field(default=None, alias="adm2Code")
    adm0_code_dots: Optional[StrictStr] = Field(default=None, alias="adm0CodeDOTS")
    adm1_code_dots: Optional[StrictStr] = Field(default=None, alias="adm1CodeDOTS")
    adm2_code_dots: Optional[StrictStr] = Field(default=None, alias="adm2CodeDOTS")
    market_id: Optional[StrictInt] = Field(default=None, alias="marketId")
    sh_latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="shLatitude")
    sh_longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="shLongitude")
    nb_beneficiaries_interviewed: Optional[StrictInt] = Field(default=None, alias="nbBeneficiariesInterviewed")
    price_score_tbu: Optional[StrictBool] = Field(default=None, alias="priceScoreTbu")
    price_score_tbd: Optional[StrictBool] = Field(default=None, alias="priceScoreTbd")
    beneficiaries_score_tbu: Optional[StrictBool] = Field(default=None, alias="beneficiariesScoreTbu")
    trd_name: Optional[StrictStr] = Field(default=None, alias="trdName")
    sev_cntr_dev: Optional[StrictStr] = Field(default=None, alias="sevCntrDev")
    ben_sev_cntr_dev: Optional[StrictStr] = Field(default=None, alias="benSevCntrDev")
    output_values: Optional[List[RpmeOutputValues]] = Field(default=None, alias="outputValues")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["surveyId", "assessmentDate", "shopId", "adm0Code", "adm1Code", "adm2Code", "adm0CodeDOTS", "adm1CodeDOTS", "adm2CodeDOTS", "marketId", "shLatitude", "shLongitude", "nbBeneficiariesInterviewed", "priceScoreTbu", "priceScoreTbd", "beneficiariesScoreTbu", "trdName", "sevCntrDev", "benSevCntrDev", "outputValues"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RpmeAssessment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in output_values (list)
        _items = []
        if self.output_values:
            for _item_output_values in self.output_values:
                if _item_output_values:
                    _items.append(_item_output_values.to_dict())
            _dict['outputValues'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if adm0_code_dots (nullable) is None
        # and model_fields_set contains the field
        if self.adm0_code_dots is None and "adm0_code_dots" in self.model_fields_set:
            _dict['adm0CodeDOTS'] = None

        # set to None if adm1_code_dots (nullable) is None
        # and model_fields_set contains the field
        if self.adm1_code_dots is None and "adm1_code_dots" in self.model_fields_set:
            _dict['adm1CodeDOTS'] = None

        # set to None if adm2_code_dots (nullable) is None
        # and model_fields_set contains the field
        if self.adm2_code_dots is None and "adm2_code_dots" in self.model_fields_set:
            _dict['adm2CodeDOTS'] = None

        # set to None if market_id (nullable) is None
        # and model_fields_set contains the field
        if self.market_id is None and "market_id" in self.model_fields_set:
            _dict['marketId'] = None

        # set to None if sh_latitude (nullable) is None
        # and model_fields_set contains the field
        if self.sh_latitude is None and "sh_latitude" in self.model_fields_set:
            _dict['shLatitude'] = None

        # set to None if sh_longitude (nullable) is None
        # and model_fields_set contains the field
        if self.sh_longitude is None and "sh_longitude" in self.model_fields_set:
            _dict['shLongitude'] = None

        # set to None if nb_beneficiaries_interviewed (nullable) is None
        # and model_fields_set contains the field
        if self.nb_beneficiaries_interviewed is None and "nb_beneficiaries_interviewed" in self.model_fields_set:
            _dict['nbBeneficiariesInterviewed'] = None

        # set to None if trd_name (nullable) is None
        # and model_fields_set contains the field
        if self.trd_name is None and "trd_name" in self.model_fields_set:
            _dict['trdName'] = None

        # set to None if sev_cntr_dev (nullable) is None
        # and model_fields_set contains the field
        if self.sev_cntr_dev is None and "sev_cntr_dev" in self.model_fields_set:
            _dict['sevCntrDev'] = None

        # set to None if ben_sev_cntr_dev (nullable) is None
        # and model_fields_set contains the field
        if self.ben_sev_cntr_dev is None and "ben_sev_cntr_dev" in self.model_fields_set:
            _dict['benSevCntrDev'] = None

        # set to None if output_values (nullable) is None
        # and model_fields_set contains the field
        if self.output_values is None and "output_values" in self.model_fields_set:
            _dict['outputValues'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RpmeAssessment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "surveyId": obj.get("surveyId"),
            "assessmentDate": obj.get("assessmentDate"),
            "shopId": obj.get("shopId"),
            "adm0Code": obj.get("adm0Code"),
            "adm1Code": obj.get("adm1Code"),
            "adm2Code": obj.get("adm2Code"),
            "adm0CodeDOTS": obj.get("adm0CodeDOTS"),
            "adm1CodeDOTS": obj.get("adm1CodeDOTS"),
            "adm2CodeDOTS": obj.get("adm2CodeDOTS"),
            "marketId": obj.get("marketId"),
            "shLatitude": obj.get("shLatitude"),
            "shLongitude": obj.get("shLongitude"),
            "nbBeneficiariesInterviewed": obj.get("nbBeneficiariesInterviewed"),
            "priceScoreTbu": obj.get("priceScoreTbu"),
            "priceScoreTbd": obj.get("priceScoreTbd"),
            "beneficiariesScoreTbu": obj.get("beneficiariesScoreTbu"),
            "trdName": obj.get("trdName"),
            "sevCntrDev": obj.get("sevCntrDev"),
            "benSevCntrDev": obj.get("benSevCntrDev"),
            "outputValues": [RpmeOutputValues.from_dict(_item) for _item in obj["outputValues"]] if obj.get("outputValues") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


