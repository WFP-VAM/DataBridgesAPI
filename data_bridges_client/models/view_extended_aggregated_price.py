# coding: utf-8

"""
    VAM-Data-Bridges

    API Documentation of the **DataBridges** platform: https://databridges.vam.wfp.org/. For API discussions and details: #api-integration-vam-data-bridges on Slack, [Teams channel](https://teams.microsoft.com/l/team/19%3a4ca595f7681f4ffa8a86b7af58832e8d%40thread.skype/conversations?groupId=cbd1e508-c6e8-459d-96b7-6cac3039c42c&tenantId=462ad9ae-d7d9-4206-b874-71b1e079776f) **API Integration** - This endpoint uses [Hey Jude](https://docs.api.wfp.org/providers/#api-patterns) pattern

    The version of the OpenAPI document: 2.0.0
    Contact: wfp.economicanalysis@wfp.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ViewExtendedAggregatedPrice(BaseModel):
    """
    ViewExtendedAggregatedPrice
    """ # noqa: E501
    commodity_id: Optional[StrictInt] = Field(default=None, alias="commodityID")
    market_id: Optional[StrictInt] = Field(default=None, alias="marketID")
    price_type_id: Optional[StrictInt] = Field(default=None, alias="priceTypeID")
    commodity_unit_id: Optional[StrictInt] = Field(default=None, alias="commodityUnitID")
    currency_id: Optional[StrictInt] = Field(default=None, alias="currencyID")
    adm0_code: Optional[StrictInt] = Field(default=None, alias="adm0Code")
    commodity_date_week: Optional[StrictInt] = Field(default=None, alias="commodityDateWeek")
    commodity_date_month: Optional[StrictInt] = Field(default=None, alias="commodityDateMonth")
    commodity_date_year: Optional[StrictInt] = Field(default=None, alias="commodityDateYear")
    commodity_price_date: Optional[datetime] = Field(default=None, alias="commodityPriceDate")
    commodity_name: Optional[StrictStr] = Field(default=None, alias="commodityName")
    market_name: Optional[StrictStr] = Field(default=None, alias="marketName")
    price_type_name: Optional[StrictStr] = Field(default=None, alias="priceTypeName")
    commodity_unit_name: Optional[StrictStr] = Field(default=None, alias="commodityUnitName")
    currency_name: Optional[StrictStr] = Field(default=None, alias="currencyName")
    country_iso3: Optional[StrictStr] = Field(default=None, alias="countryISO3")
    country_name: Optional[StrictStr] = Field(default=None, alias="countryName")
    commodity_price_source_name: Optional[StrictStr] = Field(default=None, alias="commodityPriceSourceName")
    original_frequency: Optional[StrictStr] = Field(default=None, alias="originalFrequency")
    commodity_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="commodityPrice")
    commodity_price_observations: Optional[StrictInt] = Field(default=None, alias="commodityPriceObservations")
    commodity_price_flag: Optional[StrictStr] = Field(default=None, alias="commodityPriceFlag")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["commodityID", "marketID", "priceTypeID", "commodityUnitID", "currencyID", "adm0Code", "commodityDateWeek", "commodityDateMonth", "commodityDateYear", "commodityPriceDate", "commodityName", "marketName", "priceTypeName", "commodityUnitName", "currencyName", "countryISO3", "countryName", "commodityPriceSourceName", "originalFrequency", "commodityPrice", "commodityPriceObservations", "commodityPriceFlag"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ViewExtendedAggregatedPrice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "additional_properties",
            },
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if adm0_code (nullable) is None
        # and model_fields_set contains the field
        if self.adm0_code is None and "adm0_code" in self.model_fields_set:
            _dict['adm0Code'] = None

        # set to None if commodity_date_week (nullable) is None
        # and model_fields_set contains the field
        if self.commodity_date_week is None and "commodity_date_week" in self.model_fields_set:
            _dict['commodityDateWeek'] = None

        # set to None if commodity_date_month (nullable) is None
        # and model_fields_set contains the field
        if self.commodity_date_month is None and "commodity_date_month" in self.model_fields_set:
            _dict['commodityDateMonth'] = None

        # set to None if commodity_date_year (nullable) is None
        # and model_fields_set contains the field
        if self.commodity_date_year is None and "commodity_date_year" in self.model_fields_set:
            _dict['commodityDateYear'] = None

        # set to None if commodity_price_date (nullable) is None
        # and model_fields_set contains the field
        if self.commodity_price_date is None and "commodity_price_date" in self.model_fields_set:
            _dict['commodityPriceDate'] = None

        # set to None if commodity_name (nullable) is None
        # and model_fields_set contains the field
        if self.commodity_name is None and "commodity_name" in self.model_fields_set:
            _dict['commodityName'] = None

        # set to None if market_name (nullable) is None
        # and model_fields_set contains the field
        if self.market_name is None and "market_name" in self.model_fields_set:
            _dict['marketName'] = None

        # set to None if price_type_name (nullable) is None
        # and model_fields_set contains the field
        if self.price_type_name is None and "price_type_name" in self.model_fields_set:
            _dict['priceTypeName'] = None

        # set to None if commodity_unit_name (nullable) is None
        # and model_fields_set contains the field
        if self.commodity_unit_name is None and "commodity_unit_name" in self.model_fields_set:
            _dict['commodityUnitName'] = None

        # set to None if currency_name (nullable) is None
        # and model_fields_set contains the field
        if self.currency_name is None and "currency_name" in self.model_fields_set:
            _dict['currencyName'] = None

        # set to None if country_iso3 (nullable) is None
        # and model_fields_set contains the field
        if self.country_iso3 is None and "country_iso3" in self.model_fields_set:
            _dict['countryISO3'] = None

        # set to None if country_name (nullable) is None
        # and model_fields_set contains the field
        if self.country_name is None and "country_name" in self.model_fields_set:
            _dict['countryName'] = None

        # set to None if commodity_price_source_name (nullable) is None
        # and model_fields_set contains the field
        if self.commodity_price_source_name is None and "commodity_price_source_name" in self.model_fields_set:
            _dict['commodityPriceSourceName'] = None

        # set to None if original_frequency (nullable) is None
        # and model_fields_set contains the field
        if self.original_frequency is None and "original_frequency" in self.model_fields_set:
            _dict['originalFrequency'] = None

        # set to None if commodity_price (nullable) is None
        # and model_fields_set contains the field
        if self.commodity_price is None and "commodity_price" in self.model_fields_set:
            _dict['commodityPrice'] = None

        # set to None if commodity_price_observations (nullable) is None
        # and model_fields_set contains the field
        if self.commodity_price_observations is None and "commodity_price_observations" in self.model_fields_set:
            _dict['commodityPriceObservations'] = None

        # set to None if commodity_price_flag (nullable) is None
        # and model_fields_set contains the field
        if self.commodity_price_flag is None and "commodity_price_flag" in self.model_fields_set:
            _dict['commodityPriceFlag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ViewExtendedAggregatedPrice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commodityID": obj.get("commodityID"),
            "marketID": obj.get("marketID"),
            "priceTypeID": obj.get("priceTypeID"),
            "commodityUnitID": obj.get("commodityUnitID"),
            "currencyID": obj.get("currencyID"),
            "adm0Code": obj.get("adm0Code"),
            "commodityDateWeek": obj.get("commodityDateWeek"),
            "commodityDateMonth": obj.get("commodityDateMonth"),
            "commodityDateYear": obj.get("commodityDateYear"),
            "commodityPriceDate": obj.get("commodityPriceDate"),
            "commodityName": obj.get("commodityName"),
            "marketName": obj.get("marketName"),
            "priceTypeName": obj.get("priceTypeName"),
            "commodityUnitName": obj.get("commodityUnitName"),
            "currencyName": obj.get("currencyName"),
            "countryISO3": obj.get("countryISO3"),
            "countryName": obj.get("countryName"),
            "commodityPriceSourceName": obj.get("commodityPriceSourceName"),
            "originalFrequency": obj.get("originalFrequency"),
            "commodityPrice": obj.get("commodityPrice"),
            "commodityPriceObservations": obj.get("commodityPriceObservations"),
            "commodityPriceFlag": obj.get("commodityPriceFlag")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


